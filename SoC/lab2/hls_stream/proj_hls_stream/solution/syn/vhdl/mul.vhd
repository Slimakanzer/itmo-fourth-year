-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    a_V_TVALID : IN STD_LOGIC;
    a_V_TREADY : OUT STD_LOGIC;
    b_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    b_V_TVALID : IN STD_LOGIC;
    b_V_TREADY : OUT STD_LOGIC;
    c_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_V_TVALID : OUT STD_LOGIC;
    c_V_TREADY : IN STD_LOGIC;
    n_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    n_TVALID : IN STD_LOGIC;
    n_TREADY : OUT STD_LOGIC );
end;


architecture behav of mul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mul,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=212,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=30,HLS_SYN_FF=1292,HLS_SYN_LUT=1921,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_5A : STD_LOGIC_VECTOR (6 downto 0) := "1011010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal a_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal a_V_0_vld_in : STD_LOGIC;
    signal a_V_0_vld_out : STD_LOGIC;
    signal a_V_0_ack_in : STD_LOGIC;
    signal a_V_0_ack_out : STD_LOGIC;
    signal a_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal a_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal a_V_0_sel_rd : STD_LOGIC := '0';
    signal a_V_0_sel_wr : STD_LOGIC := '0';
    signal a_V_0_sel : STD_LOGIC;
    signal a_V_0_load_A : STD_LOGIC;
    signal a_V_0_load_B : STD_LOGIC;
    signal a_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal a_V_0_state_cmp_full : STD_LOGIC;
    signal b_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal b_V_0_vld_in : STD_LOGIC;
    signal b_V_0_vld_out : STD_LOGIC;
    signal b_V_0_ack_in : STD_LOGIC;
    signal b_V_0_ack_out : STD_LOGIC;
    signal b_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal b_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal b_V_0_sel_rd : STD_LOGIC := '0';
    signal b_V_0_sel_wr : STD_LOGIC := '0';
    signal b_V_0_sel : STD_LOGIC;
    signal b_V_0_load_A : STD_LOGIC;
    signal b_V_0_load_B : STD_LOGIC;
    signal b_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal b_V_0_state_cmp_full : STD_LOGIC;
    signal c_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal c_V_1_vld_in : STD_LOGIC;
    signal c_V_1_vld_out : STD_LOGIC;
    signal c_V_1_ack_in : STD_LOGIC;
    signal c_V_1_ack_out : STD_LOGIC;
    signal c_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal c_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal c_V_1_sel_rd : STD_LOGIC := '0';
    signal c_V_1_sel_wr : STD_LOGIC := '0';
    signal c_V_1_sel : STD_LOGIC;
    signal c_V_1_load_A : STD_LOGIC;
    signal c_V_1_load_B : STD_LOGIC;
    signal c_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal c_V_1_state_cmp_full : STD_LOGIC;
    signal n_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal n_0_vld_in : STD_LOGIC;
    signal n_0_vld_out : STD_LOGIC;
    signal n_0_ack_in : STD_LOGIC;
    signal n_0_ack_out : STD_LOGIC;
    signal n_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal n_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal n_0_sel_rd : STD_LOGIC := '0';
    signal n_0_sel_wr : STD_LOGIC := '0';
    signal n_0_sel : STD_LOGIC;
    signal n_0_load_A : STD_LOGIC;
    signal n_0_load_B : STD_LOGIC;
    signal n_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal n_0_state_cmp_full : STD_LOGIC;
    signal a_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln16_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal b_V_TDATA_blk_n : STD_LOGIC;
    signal c_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln28_reg_1310 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_1310_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1338 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1338_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal n_TDATA_blk_n : STD_LOGIC;
    signal j2_0_reg_481 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_cache_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state20_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal b_cache_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state21_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage2_iter1 : BOOLEAN;
    signal ap_predicate_op317_write_state26 : BOOLEAN;
    signal ap_block_state26_io : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln20_1_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_2_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state22_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage3_iter1 : BOOLEAN;
    signal ap_predicate_op318_write_state27 : BOOLEAN;
    signal ap_block_state27_io : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal icmp_ln20_3_reg_1135 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_4_reg_1139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state23_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal icmp_ln20_5_reg_1143 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_6_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state19_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln20_7_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_8_reg_1155 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln20_9_reg_1159 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_read_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln20_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_2_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_3_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_4_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_5_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_6_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_7_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_8_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_9_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_604_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_1166 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_predicate_op66_read_state2 : BOOLEAN;
    signal ap_predicate_op70_read_state2 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal add_ln21_fu_635_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_reg_1174 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_752_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1190 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13 : BOOLEAN;
    signal add_ln36_fu_787_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_reg_1198 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln26_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_cache_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_cache_load_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal a_cache_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_cache_load_1_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_cache_load_2_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal a_cache_load_3_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_cache_load_4_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal a_cache_load_5_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_cache_load_6_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal a_cache_load_7_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_cache_load_8_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal a_cache_load_9_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_895_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1314 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_fu_901_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_reg_1319 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_1_fu_905_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_1_reg_1326 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_2_fu_909_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_2_reg_1332 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln30_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_1_fu_938_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln36_1_reg_1352 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln36_fu_966_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_reg_1367 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_1_fu_971_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_1_reg_1373 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_10_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_10_reg_1388 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_2_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_2_reg_1394 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_3_fu_1009_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_3_reg_1399 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_12_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_14_fu_1038_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_14_reg_1419 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_4_fu_1043_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_4_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_5_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_5_reg_1430 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_16_fu_1067_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_18_fu_1071_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_18_reg_1450 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_6_fu_1076_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_6_reg_1456 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_7_fu_1081_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_7_reg_1461 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_20_fu_1086_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_22_fu_1090_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_22_reg_1471 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_8_fu_1095_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_8_reg_1477 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_9_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_9_reg_1482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran19to28_state19 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state19 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal a_cache_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_cache_ce0 : STD_LOGIC;
    signal a_cache_we0 : STD_LOGIC;
    signal a_cache_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_cache_ce1 : STD_LOGIC;
    signal b_cache_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_cache_ce0 : STD_LOGIC;
    signal b_cache_we0 : STD_LOGIC;
    signal b_cache_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_cache_ce1 : STD_LOGIC;
    signal i_0_reg_459 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i1_0_reg_470 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_phi_mux_j2_0_phi_fu_485_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_tmp_5_phi_fu_497_p22 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_5_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_5_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_23_fu_1105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_25_fu_1110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln21_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_1_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_2_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_3_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_4_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_5_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_6_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_7_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_8_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_9_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_10_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_2_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_3_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_4_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_5_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_6_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_7_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_8_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_9_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_11_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_12_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln36_13_fu_961_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_14_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_15_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_16_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_17_fu_1029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_18_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln36_19_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state6 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_state9 : BOOLEAN;
    signal ap_block_state10 : BOOLEAN;
    signal ap_block_state11 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal zext_ln16_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln21_1_fu_623_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln21_10_fu_631_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_615_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln21_fu_647_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_1_fu_658_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_2_fu_669_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_3_fu_680_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_4_fu_691_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_5_fu_702_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_6_fu_713_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_7_fu_724_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_8_fu_735_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_fu_758_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_1_fu_775_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln36_20_fu_783_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_fu_767_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln36_fu_798_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_2_fu_809_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_3_fu_819_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_4_fu_829_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_5_fu_839_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_6_fu_849_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_7_fu_859_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_8_fu_869_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_9_fu_879_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_3_fu_913_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_fu_927_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln36_11_fu_946_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln36_13_fu_956_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_15_fu_976_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_17_fu_986_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln36_fu_991_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_19_fu_1014_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_21_fu_1024_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_24_fu_1057_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1544 : BOOLEAN;
    signal ap_condition_1548 : BOOLEAN;
    signal ap_condition_1555 : BOOLEAN;
    signal ap_condition_1559 : BOOLEAN;

    component mul_a_cache IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    a_cache_U : component mul_a_cache
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => a_cache_address0,
        ce0 => a_cache_ce0,
        we0 => a_cache_we0,
        d0 => a_V_0_data_out,
        q0 => a_cache_q0,
        address1 => a_cache_address1,
        ce1 => a_cache_ce1,
        q1 => a_cache_q1);

    b_cache_U : component mul_a_cache
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_cache_address0,
        ce0 => b_cache_ce0,
        we0 => b_cache_we0,
        d0 => b_V_0_data_out,
        q0 => b_cache_q0,
        address1 => b_cache_address1,
        ce1 => b_cache_ce1,
        q1 => b_cache_q1);





    a_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                a_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = a_V_0_ack_out) and (ap_const_logic_1 = a_V_0_vld_out))) then 
                                        a_V_0_sel_rd <= not(a_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    a_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                a_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = a_V_0_ack_in) and (ap_const_logic_1 = a_V_0_vld_in))) then 
                                        a_V_0_sel_wr <= not(a_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    a_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                a_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = a_V_0_state) and (ap_const_logic_0 = a_V_0_vld_in)) or ((ap_const_lv2_3 = a_V_0_state) and (ap_const_logic_0 = a_V_0_vld_in) and (ap_const_logic_1 = a_V_0_ack_out)))) then 
                    a_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = a_V_0_state) and (ap_const_logic_0 = a_V_0_ack_out)) or ((ap_const_lv2_3 = a_V_0_state) and (ap_const_logic_0 = a_V_0_ack_out) and (ap_const_logic_1 = a_V_0_vld_in)))) then 
                    a_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = a_V_0_vld_in) and (ap_const_logic_1 = a_V_0_ack_out))) and not(((ap_const_logic_0 = a_V_0_ack_out) and (ap_const_logic_1 = a_V_0_vld_in))) and (ap_const_lv2_3 = a_V_0_state)) or ((ap_const_lv2_1 = a_V_0_state) and (ap_const_logic_1 = a_V_0_ack_out)) or ((ap_const_lv2_2 = a_V_0_state) and (ap_const_logic_1 = a_V_0_vld_in)))) then 
                    a_V_0_state <= ap_const_lv2_3;
                else 
                    a_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    b_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((b_V_0_ack_out = ap_const_logic_1) and (b_V_0_vld_out = ap_const_logic_1))) then 
                                        b_V_0_sel_rd <= not(b_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    b_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((b_V_0_ack_in = ap_const_logic_1) and (b_V_0_vld_in = ap_const_logic_1))) then 
                                        b_V_0_sel_wr <= not(b_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    b_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_V_0_state <= ap_const_lv2_0;
            else
                if ((((b_V_0_state = ap_const_lv2_2) and (b_V_0_vld_in = ap_const_logic_0)) or ((b_V_0_state = ap_const_lv2_3) and (b_V_0_vld_in = ap_const_logic_0) and (b_V_0_ack_out = ap_const_logic_1)))) then 
                    b_V_0_state <= ap_const_lv2_2;
                elsif ((((b_V_0_state = ap_const_lv2_1) and (b_V_0_ack_out = ap_const_logic_0)) or ((b_V_0_state = ap_const_lv2_3) and (b_V_0_ack_out = ap_const_logic_0) and (b_V_0_vld_in = ap_const_logic_1)))) then 
                    b_V_0_state <= ap_const_lv2_1;
                elsif (((not(((b_V_0_vld_in = ap_const_logic_0) and (b_V_0_ack_out = ap_const_logic_1))) and not(((b_V_0_ack_out = ap_const_logic_0) and (b_V_0_vld_in = ap_const_logic_1))) and (b_V_0_state = ap_const_lv2_3)) or ((b_V_0_state = ap_const_lv2_1) and (b_V_0_ack_out = ap_const_logic_1)) or ((b_V_0_state = ap_const_lv2_2) and (b_V_0_vld_in = ap_const_logic_1)))) then 
                    b_V_0_state <= ap_const_lv2_3;
                else 
                    b_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    c_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                c_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((c_V_1_ack_out = ap_const_logic_1) and (c_V_1_vld_out = ap_const_logic_1))) then 
                                        c_V_1_sel_rd <= not(c_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    c_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                c_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((c_V_1_ack_in = ap_const_logic_1) and (c_V_1_vld_in = ap_const_logic_1))) then 
                                        c_V_1_sel_wr <= not(c_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    c_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                c_V_1_state <= ap_const_lv2_0;
            else
                if ((((c_V_1_state = ap_const_lv2_2) and (c_V_1_vld_in = ap_const_logic_0)) or ((c_V_1_state = ap_const_lv2_3) and (c_V_1_vld_in = ap_const_logic_0) and (c_V_1_ack_out = ap_const_logic_1)))) then 
                    c_V_1_state <= ap_const_lv2_2;
                elsif ((((c_V_1_state = ap_const_lv2_1) and (c_V_TREADY = ap_const_logic_0)) or ((c_V_1_state = ap_const_lv2_3) and (c_V_TREADY = ap_const_logic_0) and (c_V_1_vld_in = ap_const_logic_1)))) then 
                    c_V_1_state <= ap_const_lv2_1;
                elsif (((not(((c_V_1_vld_in = ap_const_logic_0) and (c_V_1_ack_out = ap_const_logic_1))) and not(((c_V_TREADY = ap_const_logic_0) and (c_V_1_vld_in = ap_const_logic_1))) and (c_V_1_state = ap_const_lv2_3)) or ((c_V_1_state = ap_const_lv2_1) and (c_V_1_ack_out = ap_const_logic_1)) or ((c_V_1_state = ap_const_lv2_2) and (c_V_1_vld_in = ap_const_logic_1)))) then 
                    c_V_1_state <= ap_const_lv2_3;
                else 
                    c_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    n_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                n_0_sel_rd <= ap_const_logic_0;
            else
                if (((n_0_ack_out = ap_const_logic_1) and (n_0_vld_out = ap_const_logic_1))) then 
                                        n_0_sel_rd <= not(n_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    n_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                n_0_sel_wr <= ap_const_logic_0;
            else
                if (((n_0_ack_in = ap_const_logic_1) and (n_0_vld_in = ap_const_logic_1))) then 
                                        n_0_sel_wr <= not(n_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    n_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                n_0_state <= ap_const_lv2_0;
            else
                if ((((n_0_state = ap_const_lv2_2) and (n_0_vld_in = ap_const_logic_0)) or ((n_0_state = ap_const_lv2_3) and (n_0_vld_in = ap_const_logic_0) and (n_0_ack_out = ap_const_logic_1)))) then 
                    n_0_state <= ap_const_lv2_2;
                elsif ((((n_0_state = ap_const_lv2_1) and (n_0_ack_out = ap_const_logic_0)) or ((n_0_state = ap_const_lv2_3) and (n_0_ack_out = ap_const_logic_0) and (n_0_vld_in = ap_const_logic_1)))) then 
                    n_0_state <= ap_const_lv2_1;
                elsif (((not(((n_0_vld_in = ap_const_logic_0) and (n_0_ack_out = ap_const_logic_1))) and not(((n_0_ack_out = ap_const_logic_0) and (n_0_vld_in = ap_const_logic_1))) and (n_0_state = ap_const_lv2_3)) or ((n_0_state = ap_const_lv2_1) and (n_0_ack_out = ap_const_logic_1)) or ((n_0_state = ap_const_lv2_2) and (n_0_vld_in = ap_const_logic_1)))) then 
                    n_0_state <= ap_const_lv2_3;
                else 
                    n_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_tmp_5_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1559)) then 
                    ap_phi_reg_pp0_iter0_tmp_5_reg_492 <= add_ln36_10_fu_1000_p2;
                elsif ((ap_const_boolean_1 = ap_condition_1555)) then 
                    ap_phi_reg_pp0_iter0_tmp_5_reg_492 <= mul_ln36_reg_1367;
                elsif ((ap_const_boolean_1 = ap_condition_1548)) then 
                    ap_phi_reg_pp0_iter0_tmp_5_reg_492 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmp_5_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_8_reg_1155 = ap_const_lv1_1) and (icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln28_reg_1310_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_22_fu_1090_p2;
            elsif (((icmp_ln20_7_reg_1151 = ap_const_lv1_1) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln28_reg_1310_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_20_fu_1086_p2;
            elsif (((icmp_ln20_6_reg_1147 = ap_const_lv1_1) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_18_fu_1071_p2;
            elsif (((icmp_ln20_5_reg_1143 = ap_const_lv1_1) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_16_fu_1067_p2;
            elsif (((icmp_ln20_4_reg_1139 = ap_const_lv1_1) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_14_fu_1038_p2;
            elsif (((icmp_ln20_3_reg_1135 = ap_const_lv1_1) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_12_fu_1034_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= ap_phi_reg_pp0_iter0_tmp_5_reg_492;
            end if; 
        end if;
    end process;

    i1_0_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i1_0_reg_470 <= i_reg_1190;
            elsif ((not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln17_fu_610_p2 = ap_const_lv1_1) or (icmp_ln16_fu_598_p2 = ap_const_lv1_1)))) then 
                i1_0_reg_470 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_reg_459 <= i_1_reg_1166;
            elsif ((not(((ap_start = ap_const_logic_0) or (n_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_459 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j2_0_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j2_0_reg_481 <= ap_const_lv4_0;
            elsif (((icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j2_0_reg_481 <= j_reg_1314;
            end if; 
        end if;
    end process;

    reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln20_8_reg_1155 = ap_const_lv1_0) and (icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                reg_524 <= b_cache_q1;
            elsif (((icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_524 <= b_cache_q0;
            end if; 
        end if;
    end process;

    reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln20_9_reg_1159 = ap_const_lv1_0) and (icmp_ln20_8_reg_1155 = ap_const_lv1_0) and (icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                reg_529 <= b_cache_q0;
            elsif (((icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_529 <= b_cache_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = a_V_0_load_A)) then
                a_V_0_payload_A <= a_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = a_V_0_load_B)) then
                a_V_0_payload_B <= a_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                a_cache_load_1_reg_1225 <= a_cache_q1;
                a_cache_load_reg_1220 <= a_cache_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                a_cache_load_2_reg_1240 <= a_cache_q1;
                a_cache_load_3_reg_1245 <= a_cache_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                a_cache_load_4_reg_1260 <= a_cache_q1;
                a_cache_load_5_reg_1265 <= a_cache_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                a_cache_load_6_reg_1280 <= a_cache_q1;
                a_cache_load_7_reg_1285 <= a_cache_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                a_cache_load_8_reg_1300 <= a_cache_q1;
                a_cache_load_9_reg_1305 <= a_cache_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (icmp_ln17_fu_610_p2 = ap_const_lv1_0) and (icmp_ln16_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln21_reg_1174(6 downto 1) <= add_ln21_fu_635_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln36_10_reg_1388 <= add_ln36_10_fu_1000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln36_14_reg_1419 <= add_ln36_14_fu_1038_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln36_18_reg_1450 <= add_ln36_18_fu_1071_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln28_reg_1310_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln36_22_reg_1471 <= add_ln36_22_fu_1090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((c_V_1_state = ap_const_lv2_1) or ((c_V_1_state = ap_const_lv2_3) and (c_V_TREADY = ap_const_logic_0)))) and (icmp_ln27_fu_762_p2 = ap_const_lv1_0) and (icmp_ln26_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    add_ln36_reg_1198(6 downto 1) <= add_ln36_fu_787_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((b_V_0_load_A = ap_const_logic_1)) then
                b_V_0_payload_A <= b_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((b_V_0_load_B = ap_const_logic_1)) then
                b_V_0_payload_B <= b_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((c_V_1_load_A = ap_const_logic_1)) then
                c_V_1_payload_A <= ap_phi_mux_tmp_5_phi_fu_497_p22;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((c_V_1_load_B = ap_const_logic_1)) then
                c_V_1_payload_B <= ap_phi_mux_tmp_5_phi_fu_497_p22;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_1166 <= i_1_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((c_V_1_state = ap_const_lv2_1) or ((c_V_1_state = ap_const_lv2_3) and (c_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                i_reg_1190 <= i_fu_752_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (n_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln20_1_reg_1127 <= icmp_ln20_1_fu_540_p2;
                icmp_ln20_2_reg_1131 <= icmp_ln20_2_fu_546_p2;
                icmp_ln20_3_reg_1135 <= icmp_ln20_3_fu_552_p2;
                icmp_ln20_4_reg_1139 <= icmp_ln20_4_fu_558_p2;
                icmp_ln20_5_reg_1143 <= icmp_ln20_5_fu_564_p2;
                icmp_ln20_6_reg_1147 <= icmp_ln20_6_fu_570_p2;
                icmp_ln20_7_reg_1151 <= icmp_ln20_7_fu_576_p2;
                icmp_ln20_8_reg_1155 <= icmp_ln20_8_fu_582_p2;
                icmp_ln20_9_reg_1159 <= icmp_ln20_9_fu_588_p2;
                icmp_ln20_reg_1123 <= icmp_ln20_fu_534_p2;
                n_read_reg_1116 <= n_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln28_reg_1310 <= icmp_ln28_fu_889_p2;
                icmp_ln28_reg_1310_pp0_iter1_reg <= icmp_ln28_reg_1310;
                icmp_ln30_reg_1338_pp0_iter1_reg <= icmp_ln30_reg_1338;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_889_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln30_reg_1338 <= icmp_ln30_fu_917_p2;
                    zext_ln28_1_reg_1326(3 downto 0) <= zext_ln28_1_fu_905_p1(3 downto 0);
                    zext_ln28_2_reg_1332(3 downto 0) <= zext_ln28_2_fu_909_p1(3 downto 0);
                    zext_ln28_reg_1319(3 downto 0) <= zext_ln28_fu_901_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                j_reg_1314 <= j_fu_895_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln36_1_reg_1373 <= mul_ln36_1_fu_971_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln36_2_reg_1394 <= mul_ln36_2_fu_1004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln36_3_reg_1399 <= mul_ln36_3_fu_1009_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_ln36_4_reg_1425 <= mul_ln36_4_fu_1043_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_ln36_5_reg_1430 <= mul_ln36_5_fu_1048_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln36_6_reg_1456 <= mul_ln36_6_fu_1076_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln36_7_reg_1461 <= mul_ln36_7_fu_1081_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_8_reg_1155 = ap_const_lv1_0) and (icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln28_reg_1310_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln36_8_reg_1477 <= mul_ln36_8_fu_1095_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_9_reg_1159 = ap_const_lv1_0) and (icmp_ln20_8_reg_1155 = ap_const_lv1_0) and (icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln28_reg_1310_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln36_9_reg_1482 <= mul_ln36_9_fu_1100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln36_reg_1367 <= mul_ln36_fu_966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((n_0_load_A = ap_const_logic_1)) then
                n_0_payload_A <= n_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((n_0_load_B = ap_const_logic_1)) then
                n_0_payload_B <= n_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_917_p2 = ap_const_lv1_0) and (icmp_ln28_fu_889_p2 = ap_const_lv1_0) and (icmp_ln20_8_reg_1155 = ap_const_lv1_0) and (icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    or_ln36_1_reg_1352(3 downto 0) <= or_ln36_1_fu_938_p3(3 downto 0);
            end if;
        end if;
    end process;
    add_ln21_reg_1174(0) <= '0';
    add_ln36_reg_1198(0) <= '0';
    zext_ln28_reg_1319(6 downto 4) <= "000";
    zext_ln28_1_reg_1326(5 downto 4) <= "00";
    zext_ln28_2_reg_1332(4) <= '0';
    or_ln36_1_reg_1352(6 downto 4) <= "101";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, a_V_0_vld_out, b_V_0_vld_out, c_V_TREADY, c_V_1_state, n_0_vld_out, ap_CS_fsm_state2, icmp_ln16_fu_598_p2, icmp_ln17_fu_610_p2, icmp_ln20_reg_1123, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, icmp_ln20_1_reg_1127, icmp_ln20_2_reg_1131, icmp_ln20_3_reg_1135, icmp_ln20_4_reg_1139, icmp_ln20_5_reg_1143, icmp_ln20_6_reg_1147, icmp_ln20_7_reg_1151, icmp_ln20_8_reg_1155, icmp_ln20_9_reg_1159, ap_predicate_op66_read_state2, ap_predicate_op70_read_state2, ap_CS_fsm_state13, icmp_ln26_fu_746_p2, icmp_ln27_fu_762_p2, ap_block_pp0_stage0_subdone, ap_predicate_tran19to28_state19, ap_block_pp0_stage4_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (n_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln17_fu_610_p2 = ap_const_lv1_1) or (icmp_ln16_fu_598_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif ((not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (icmp_ln17_fu_610_p2 = ap_const_lv1_0) and (icmp_ln16_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln20_1_reg_1127 = ap_const_lv1_1) and (icmp_ln17_fu_610_p2 = ap_const_lv1_0) and (icmp_ln16_fu_598_p2 = ap_const_lv1_0)) or ((icmp_ln20_reg_1123 = ap_const_lv1_1) and (icmp_ln17_fu_610_p2 = ap_const_lv1_0) and (icmp_ln16_fu_598_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_2_reg_1131 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_3_reg_1135 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_4_reg_1139 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_5_reg_1143 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_6_reg_1147 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_7_reg_1151 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_8_reg_1155 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_9_reg_1159 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (icmp_ln20_9_reg_1159 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state13 => 
                if ((not(((c_V_1_state = ap_const_lv2_1) or ((c_V_1_state = ap_const_lv2_3) and (c_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state13) and ((icmp_ln27_fu_762_p2 = ap_const_lv1_1) or (icmp_ln26_fu_746_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((c_V_1_state = ap_const_lv2_1) or ((c_V_1_state = ap_const_lv2_3) and (c_V_TREADY = ap_const_logic_0)))) and (icmp_ln27_fu_762_p2 = ap_const_lv1_0) and (icmp_ln26_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_predicate_tran19to28_state19 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_predicate_tran19to28_state19 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_V_0_ack_in <= a_V_0_state(1);

    a_V_0_ack_out_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_predicate_op66_read_state2, ap_predicate_op70_read_state2)
    begin
        if (((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            a_V_0_ack_out <= ap_const_logic_1;
        else 
            a_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    a_V_0_data_out_assign_proc : process(a_V_0_payload_A, a_V_0_payload_B, a_V_0_sel)
    begin
        if ((ap_const_logic_1 = a_V_0_sel)) then 
            a_V_0_data_out <= a_V_0_payload_B;
        else 
            a_V_0_data_out <= a_V_0_payload_A;
        end if; 
    end process;

    a_V_0_load_A <= (not(a_V_0_sel_wr) and a_V_0_state_cmp_full);
    a_V_0_load_B <= (a_V_0_state_cmp_full and a_V_0_sel_wr);
    a_V_0_sel <= a_V_0_sel_rd;
    a_V_0_state_cmp_full <= '0' when (a_V_0_state = ap_const_lv2_1) else '1';
    a_V_0_vld_in <= a_V_TVALID;
    a_V_0_vld_out <= a_V_0_state(0);

    a_V_TDATA_blk_n_assign_proc : process(a_V_0_state, ap_CS_fsm_state2, icmp_ln16_fu_598_p2, icmp_ln17_fu_610_p2, icmp_ln20_reg_1123, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln20_reg_1123 = ap_const_lv1_0) and (icmp_ln17_fu_610_p2 = ap_const_lv1_0) and (icmp_ln16_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            a_V_TDATA_blk_n <= a_V_0_state(0);
        else 
            a_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    a_V_TREADY <= a_V_0_state(1);

    a_cache_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, zext_ln21_fu_641_p1, zext_ln21_1_fu_652_p1, zext_ln21_2_fu_663_p1, zext_ln21_3_fu_674_p1, zext_ln21_4_fu_685_p1, zext_ln21_5_fu_696_p1, zext_ln21_6_fu_707_p1, zext_ln21_7_fu_718_p1, zext_ln21_8_fu_729_p1, zext_ln21_9_fu_740_p1, zext_ln36_fu_793_p1, zext_ln36_3_fu_824_p1, zext_ln36_5_fu_844_p1, zext_ln36_7_fu_864_p1, zext_ln36_9_fu_884_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            a_cache_address0 <= zext_ln36_9_fu_884_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            a_cache_address0 <= zext_ln36_7_fu_864_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            a_cache_address0 <= zext_ln36_5_fu_844_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            a_cache_address0 <= zext_ln36_3_fu_824_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_cache_address0 <= zext_ln36_fu_793_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_cache_address0 <= zext_ln21_9_fu_740_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_cache_address0 <= zext_ln21_8_fu_729_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a_cache_address0 <= zext_ln21_7_fu_718_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_cache_address0 <= zext_ln21_6_fu_707_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_cache_address0 <= zext_ln21_5_fu_696_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_cache_address0 <= zext_ln21_4_fu_685_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_cache_address0 <= zext_ln21_3_fu_674_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_cache_address0 <= zext_ln21_2_fu_663_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_cache_address0 <= zext_ln21_1_fu_652_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_cache_address0 <= zext_ln21_fu_641_p1(7 - 1 downto 0);
        else 
            a_cache_address0 <= "XXXXXXX";
        end if; 
    end process;


    a_cache_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, zext_ln36_10_fu_804_p1, zext_ln36_2_fu_814_p1, zext_ln36_4_fu_834_p1, zext_ln36_6_fu_854_p1, zext_ln36_8_fu_874_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            a_cache_address1 <= zext_ln36_8_fu_874_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            a_cache_address1 <= zext_ln36_6_fu_854_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            a_cache_address1 <= zext_ln36_4_fu_834_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            a_cache_address1 <= zext_ln36_2_fu_814_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_cache_address1 <= zext_ln36_10_fu_804_p1(7 - 1 downto 0);
        else 
            a_cache_address1 <= "XXXXXXX";
        end if; 
    end process;


    a_cache_ce0_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out, c_V_TREADY, c_V_1_state, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_predicate_op66_read_state2, ap_predicate_op70_read_state2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (not(((c_V_1_state = ap_const_lv2_1) or ((c_V_1_state = ap_const_lv2_3) and (c_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            a_cache_ce0 <= ap_const_logic_1;
        else 
            a_cache_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_cache_ce1_assign_proc : process(c_V_TREADY, c_V_1_state, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (not(((c_V_1_state = ap_const_lv2_1) or ((c_V_1_state = ap_const_lv2_3) and (c_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            a_cache_ce1 <= ap_const_logic_1;
        else 
            a_cache_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_cache_we0_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out, ap_CS_fsm_state2, icmp_ln16_fu_598_p2, icmp_ln17_fu_610_p2, icmp_ln20_reg_1123, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_predicate_op66_read_state2, ap_predicate_op70_read_state2)
    begin
        if (((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (icmp_ln17_fu_610_p2 = ap_const_lv1_0) and (icmp_ln16_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            a_cache_we0 <= ap_const_logic_1;
        else 
            a_cache_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln21_1_fu_658_p2 <= std_logic_vector(unsigned(add_ln21_reg_1174) + unsigned(ap_const_lv7_2));
    add_ln21_2_fu_669_p2 <= std_logic_vector(unsigned(add_ln21_reg_1174) + unsigned(ap_const_lv7_3));
    add_ln21_3_fu_680_p2 <= std_logic_vector(unsigned(add_ln21_reg_1174) + unsigned(ap_const_lv7_4));
    add_ln21_4_fu_691_p2 <= std_logic_vector(unsigned(add_ln21_reg_1174) + unsigned(ap_const_lv7_5));
    add_ln21_5_fu_702_p2 <= std_logic_vector(unsigned(add_ln21_reg_1174) + unsigned(ap_const_lv7_6));
    add_ln21_6_fu_713_p2 <= std_logic_vector(unsigned(add_ln21_reg_1174) + unsigned(ap_const_lv7_7));
    add_ln21_7_fu_724_p2 <= std_logic_vector(unsigned(add_ln21_reg_1174) + unsigned(ap_const_lv7_8));
    add_ln21_8_fu_735_p2 <= std_logic_vector(unsigned(add_ln21_reg_1174) + unsigned(ap_const_lv7_9));
    add_ln21_fu_635_p2 <= std_logic_vector(unsigned(zext_ln21_10_fu_631_p1) + unsigned(shl_ln_fu_615_p3));
    add_ln36_10_fu_1000_p2 <= std_logic_vector(unsigned(mul_ln36_reg_1367) + unsigned(mul_ln36_1_reg_1373));
    add_ln36_11_fu_946_p2 <= std_logic_vector(unsigned(zext_ln28_2_reg_1332) + unsigned(ap_const_lv5_14));
    add_ln36_12_fu_1034_p2 <= std_logic_vector(unsigned(add_ln36_10_reg_1388) + unsigned(mul_ln36_2_reg_1394));
    add_ln36_13_fu_956_p2 <= std_logic_vector(unsigned(zext_ln28_1_reg_1326) + unsigned(ap_const_lv6_1E));
    add_ln36_14_fu_1038_p2 <= std_logic_vector(unsigned(add_ln36_12_fu_1034_p2) + unsigned(mul_ln36_3_reg_1399));
    add_ln36_15_fu_976_p2 <= std_logic_vector(unsigned(zext_ln28_1_reg_1326) + unsigned(ap_const_lv6_28));
    add_ln36_16_fu_1067_p2 <= std_logic_vector(unsigned(add_ln36_14_reg_1419) + unsigned(mul_ln36_4_reg_1425));
    add_ln36_17_fu_986_p2 <= std_logic_vector(unsigned(zext_ln28_2_reg_1332) + unsigned(ap_const_lv5_12));
    add_ln36_18_fu_1071_p2 <= std_logic_vector(unsigned(add_ln36_16_fu_1067_p2) + unsigned(mul_ln36_5_reg_1430));
    add_ln36_19_fu_1014_p2 <= std_logic_vector(unsigned(zext_ln28_reg_1319) + unsigned(ap_const_lv7_3C));
    add_ln36_1_fu_927_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_909_p1) + unsigned(ap_const_lv5_A));
    add_ln36_20_fu_1086_p2 <= std_logic_vector(unsigned(add_ln36_18_reg_1450) + unsigned(mul_ln36_6_reg_1456));
    add_ln36_21_fu_1024_p2 <= std_logic_vector(unsigned(zext_ln28_reg_1319) + unsigned(ap_const_lv7_46));
    add_ln36_22_fu_1090_p2 <= std_logic_vector(unsigned(add_ln36_20_fu_1086_p2) + unsigned(mul_ln36_7_reg_1461));
    add_ln36_23_fu_1105_p2 <= std_logic_vector(unsigned(add_ln36_22_reg_1471) + unsigned(mul_ln36_8_reg_1477));
    add_ln36_24_fu_1057_p2 <= std_logic_vector(unsigned(zext_ln28_reg_1319) + unsigned(ap_const_lv7_5A));
    add_ln36_25_fu_1110_p2 <= std_logic_vector(unsigned(add_ln36_23_fu_1105_p2) + unsigned(mul_ln36_9_reg_1482));
    add_ln36_2_fu_809_p2 <= std_logic_vector(unsigned(add_ln36_reg_1198) + unsigned(ap_const_lv7_2));
    add_ln36_3_fu_819_p2 <= std_logic_vector(unsigned(add_ln36_reg_1198) + unsigned(ap_const_lv7_3));
    add_ln36_4_fu_829_p2 <= std_logic_vector(unsigned(add_ln36_reg_1198) + unsigned(ap_const_lv7_4));
    add_ln36_5_fu_839_p2 <= std_logic_vector(unsigned(add_ln36_reg_1198) + unsigned(ap_const_lv7_5));
    add_ln36_6_fu_849_p2 <= std_logic_vector(unsigned(add_ln36_reg_1198) + unsigned(ap_const_lv7_6));
    add_ln36_7_fu_859_p2 <= std_logic_vector(unsigned(add_ln36_reg_1198) + unsigned(ap_const_lv7_7));
    add_ln36_8_fu_869_p2 <= std_logic_vector(unsigned(add_ln36_reg_1198) + unsigned(ap_const_lv7_8));
    add_ln36_9_fu_879_p2 <= std_logic_vector(unsigned(add_ln36_reg_1198) + unsigned(ap_const_lv7_9));
    add_ln36_fu_787_p2 <= std_logic_vector(unsigned(zext_ln36_20_fu_783_p1) + unsigned(shl_ln1_fu_767_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state28 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state26_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_const_boolean_1 = ap_block_state26_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state26_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_const_boolean_1 = ap_block_state26_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state27_io)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state27_io)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, n_0_vld_out)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (n_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state10_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out)
    begin
                ap_block_state10 <= ((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out)
    begin
                ap_block_state11 <= ((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state13_assign_proc : process(c_V_TREADY, c_V_1_state)
    begin
                ap_block_state13 <= ((c_V_1_state = ap_const_lv2_1) or ((c_V_1_state = ap_const_lv2_3) and (c_V_TREADY = ap_const_logic_0)));
    end process;

        ap_block_state19_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out, ap_predicate_op66_read_state2, ap_predicate_op70_read_state2)
    begin
                ap_block_state2 <= (((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)));
    end process;

        ap_block_state20_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_io_assign_proc : process(c_V_1_ack_in, ap_predicate_op317_write_state26)
    begin
                ap_block_state26_io <= ((ap_predicate_op317_write_state26 = ap_const_boolean_1) and (c_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state26_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_io_assign_proc : process(c_V_1_ack_in, ap_predicate_op318_write_state27)
    begin
                ap_block_state27_io <= ((ap_predicate_op318_write_state27 = ap_const_boolean_1) and (c_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state27_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out)
    begin
                ap_block_state3 <= ((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out)
    begin
                ap_block_state4 <= ((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out)
    begin
                ap_block_state5 <= ((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out)
    begin
                ap_block_state6 <= ((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out)
    begin
                ap_block_state7 <= ((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out)
    begin
                ap_block_state8 <= ((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out)
    begin
                ap_block_state9 <= ((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_condition_1544_assign_proc : process(icmp_ln20_reg_1123, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, icmp_ln28_reg_1310_pp0_iter1_reg, icmp_ln30_reg_1338_pp0_iter1_reg, icmp_ln20_1_reg_1127, icmp_ln20_2_reg_1131, icmp_ln20_3_reg_1135, icmp_ln20_4_reg_1139, icmp_ln20_5_reg_1143, icmp_ln20_6_reg_1147, icmp_ln20_7_reg_1151, icmp_ln20_8_reg_1155)
    begin
                ap_condition_1544 <= ((icmp_ln20_8_reg_1155 = ap_const_lv1_0) and (icmp_ln20_7_reg_1151 = ap_const_lv1_0) and (icmp_ln20_6_reg_1147 = ap_const_lv1_0) and (icmp_ln20_5_reg_1143 = ap_const_lv1_0) and (icmp_ln20_4_reg_1139 = ap_const_lv1_0) and (icmp_ln20_3_reg_1135 = ap_const_lv1_0) and (icmp_ln20_2_reg_1131 = ap_const_lv1_0) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln28_reg_1310_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_condition_1548_assign_proc : process(icmp_ln20_reg_1123, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln28_fu_889_p2, icmp_ln30_fu_917_p2)
    begin
                ap_condition_1548 <= ((icmp_ln20_reg_1123 = ap_const_lv1_1) and (icmp_ln30_fu_917_p2 = ap_const_lv1_0) and (icmp_ln28_fu_889_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_1555_assign_proc : process(icmp_ln20_reg_1123, icmp_ln28_reg_1310, icmp_ln30_reg_1338, ap_CS_fsm_pp0_stage3, icmp_ln20_1_reg_1127, ap_block_pp0_stage3_11001)
    begin
                ap_condition_1555 <= ((icmp_ln20_1_reg_1127 = ap_const_lv1_1) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_1559_assign_proc : process(icmp_ln20_reg_1123, icmp_ln28_reg_1310, icmp_ln30_reg_1338, ap_CS_fsm_pp0_stage3, icmp_ln20_1_reg_1127, icmp_ln20_2_reg_1131, ap_block_pp0_stage3_11001)
    begin
                ap_condition_1559 <= ((icmp_ln20_2_reg_1131 = ap_const_lv1_1) and (icmp_ln20_1_reg_1127 = ap_const_lv1_0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_pp0_exit_iter0_state19_assign_proc : process(ap_predicate_tran19to28_state19)
    begin
        if ((ap_predicate_tran19to28_state19 = ap_const_boolean_1)) then 
            ap_condition_pp0_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(c_V_TREADY, c_V_1_state, ap_CS_fsm_state13, icmp_ln26_fu_746_p2, icmp_ln27_fu_762_p2)
    begin
        if ((not(((c_V_1_state = ap_const_lv2_1) or ((c_V_1_state = ap_const_lv2_3) and (c_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state13) and ((icmp_ln27_fu_762_p2 = ap_const_lv1_1) or (icmp_ln26_fu_746_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j2_0_phi_fu_485_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln28_reg_1310, icmp_ln30_reg_1338, j2_0_reg_481, ap_CS_fsm_pp0_stage0, j_reg_1314, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln30_reg_1338 = ap_const_lv1_0) and (icmp_ln28_reg_1310 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j2_0_phi_fu_485_p4 <= j_reg_1314;
        else 
            ap_phi_mux_j2_0_phi_fu_485_p4 <= j2_0_reg_481;
        end if; 
    end process;


    ap_phi_mux_tmp_5_phi_fu_497_p22_assign_proc : process(icmp_ln20_9_reg_1159, ap_phi_reg_pp0_iter1_tmp_5_reg_492, add_ln36_23_fu_1105_p2, add_ln36_25_fu_1110_p2, ap_condition_1544)
    begin
        if ((ap_const_boolean_1 = ap_condition_1544)) then
            if ((icmp_ln20_9_reg_1159 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_5_phi_fu_497_p22 <= add_ln36_25_fu_1110_p2;
            elsif ((icmp_ln20_9_reg_1159 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_5_phi_fu_497_p22 <= add_ln36_23_fu_1105_p2;
            else 
                ap_phi_mux_tmp_5_phi_fu_497_p22 <= ap_phi_reg_pp0_iter1_tmp_5_reg_492;
            end if;
        else 
            ap_phi_mux_tmp_5_phi_fu_497_p22 <= ap_phi_reg_pp0_iter1_tmp_5_reg_492;
        end if; 
    end process;


    ap_predicate_op317_write_state26_assign_proc : process(icmp_ln28_reg_1310_pp0_iter1_reg, icmp_ln30_reg_1338_pp0_iter1_reg)
    begin
                ap_predicate_op317_write_state26 <= ((icmp_ln30_reg_1338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln28_reg_1310_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op318_write_state27_assign_proc : process(icmp_ln28_reg_1310_pp0_iter1_reg, icmp_ln30_reg_1338_pp0_iter1_reg)
    begin
                ap_predicate_op318_write_state27 <= ((icmp_ln30_reg_1338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln28_reg_1310_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op66_read_state2_assign_proc : process(icmp_ln16_fu_598_p2, icmp_ln17_fu_610_p2, icmp_ln20_reg_1123)
    begin
                ap_predicate_op66_read_state2 <= ((icmp_ln20_reg_1123 = ap_const_lv1_0) and (icmp_ln17_fu_610_p2 = ap_const_lv1_0) and (icmp_ln16_fu_598_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op70_read_state2_assign_proc : process(icmp_ln16_fu_598_p2, icmp_ln17_fu_610_p2, icmp_ln20_reg_1123)
    begin
                ap_predicate_op70_read_state2 <= ((icmp_ln20_reg_1123 = ap_const_lv1_0) and (icmp_ln17_fu_610_p2 = ap_const_lv1_0) and (icmp_ln16_fu_598_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_tran19to28_state19_assign_proc : process(icmp_ln28_fu_889_p2, icmp_ln30_fu_917_p2)
    begin
                ap_predicate_tran19to28_state19 <= ((icmp_ln30_fu_917_p2 = ap_const_lv1_1) or (icmp_ln28_fu_889_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(c_V_TREADY, c_V_1_state, ap_CS_fsm_state13, icmp_ln26_fu_746_p2, icmp_ln27_fu_762_p2)
    begin
        if ((not(((c_V_1_state = ap_const_lv2_1) or ((c_V_1_state = ap_const_lv2_3) and (c_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state13) and ((icmp_ln27_fu_762_p2 = ap_const_lv1_1) or (icmp_ln26_fu_746_p2 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_V_0_ack_in <= b_V_0_state(1);

    b_V_0_ack_out_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_predicate_op66_read_state2, ap_predicate_op70_read_state2)
    begin
        if (((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (ap_predicate_op70_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            b_V_0_ack_out <= ap_const_logic_1;
        else 
            b_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    b_V_0_data_out_assign_proc : process(b_V_0_payload_A, b_V_0_payload_B, b_V_0_sel)
    begin
        if ((b_V_0_sel = ap_const_logic_1)) then 
            b_V_0_data_out <= b_V_0_payload_B;
        else 
            b_V_0_data_out <= b_V_0_payload_A;
        end if; 
    end process;

    b_V_0_load_A <= (not(b_V_0_sel_wr) and b_V_0_state_cmp_full);
    b_V_0_load_B <= (b_V_0_state_cmp_full and b_V_0_sel_wr);
    b_V_0_sel <= b_V_0_sel_rd;
    b_V_0_state_cmp_full <= '0' when (b_V_0_state = ap_const_lv2_1) else '1';
    b_V_0_vld_in <= b_V_TVALID;
    b_V_0_vld_out <= b_V_0_state(0);

    b_V_TDATA_blk_n_assign_proc : process(b_V_0_state, ap_CS_fsm_state2, icmp_ln16_fu_598_p2, icmp_ln17_fu_610_p2, icmp_ln20_reg_1123, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln20_reg_1123 = ap_const_lv1_0) and (icmp_ln17_fu_610_p2 = ap_const_lv1_0) and (icmp_ln16_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            b_V_TDATA_blk_n <= b_V_0_state(0);
        else 
            b_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_V_TREADY <= b_V_0_state(1);

    b_cache_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln21_fu_641_p1, zext_ln21_1_fu_652_p1, zext_ln21_2_fu_663_p1, zext_ln21_3_fu_674_p1, zext_ln21_4_fu_685_p1, zext_ln21_5_fu_696_p1, zext_ln21_6_fu_707_p1, zext_ln21_7_fu_718_p1, zext_ln21_8_fu_729_p1, zext_ln21_9_fu_740_p1, zext_ln36_1_fu_922_p1, ap_block_pp0_stage1, zext_ln36_13_fu_961_p1, zext_ln36_15_fu_995_p1, zext_ln36_17_fu_1029_p1, ap_block_pp0_stage4, zext_ln36_19_fu_1062_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            b_cache_address0 <= zext_ln36_19_fu_1062_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            b_cache_address0 <= zext_ln36_17_fu_1029_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            b_cache_address0 <= zext_ln36_15_fu_995_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            b_cache_address0 <= zext_ln36_13_fu_961_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            b_cache_address0 <= zext_ln36_1_fu_922_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            b_cache_address0 <= zext_ln21_9_fu_740_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            b_cache_address0 <= zext_ln21_8_fu_729_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            b_cache_address0 <= zext_ln21_7_fu_718_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            b_cache_address0 <= zext_ln21_6_fu_707_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_cache_address0 <= zext_ln21_5_fu_696_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_cache_address0 <= zext_ln21_4_fu_685_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_cache_address0 <= zext_ln21_3_fu_674_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            b_cache_address0 <= zext_ln21_2_fu_663_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_cache_address0 <= zext_ln21_1_fu_652_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_cache_address0 <= zext_ln21_fu_641_p1(7 - 1 downto 0);
        else 
            b_cache_address0 <= "XXXXXXX";
        end if; 
    end process;


    b_cache_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln36_11_fu_933_p1, zext_ln36_12_fu_951_p1, ap_block_pp0_stage1, zext_ln36_14_fu_981_p1, zext_ln36_16_fu_1019_p1, zext_ln36_18_fu_1053_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                b_cache_address1 <= zext_ln36_18_fu_1053_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                b_cache_address1 <= zext_ln36_16_fu_1019_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                b_cache_address1 <= zext_ln36_14_fu_981_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_cache_address1 <= zext_ln36_12_fu_951_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_cache_address1 <= zext_ln36_11_fu_933_p1(7 - 1 downto 0);
            else 
                b_cache_address1 <= "XXXXXXX";
            end if;
        else 
            b_cache_address1 <= "XXXXXXX";
        end if; 
    end process;


    b_cache_ce0_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_predicate_op66_read_state2, ap_predicate_op70_read_state2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            b_cache_ce0 <= ap_const_logic_1;
        else 
            b_cache_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_cache_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_cache_ce1 <= ap_const_logic_1;
        else 
            b_cache_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_cache_we0_assign_proc : process(a_V_0_vld_out, b_V_0_vld_out, ap_CS_fsm_state2, icmp_ln16_fu_598_p2, icmp_ln17_fu_610_p2, icmp_ln20_reg_1123, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_predicate_op66_read_state2, ap_predicate_op70_read_state2)
    begin
        if (((not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_logic_0 = a_V_0_vld_out) or (b_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((ap_predicate_op70_read_state2 = ap_const_boolean_1) and (b_V_0_vld_out = ap_const_logic_0)) or ((ap_predicate_op66_read_state2 = ap_const_boolean_1) and (ap_const_logic_0 = a_V_0_vld_out)))) and (icmp_ln20_reg_1123 = ap_const_lv1_0) and (icmp_ln17_fu_610_p2 = ap_const_lv1_0) and (icmp_ln16_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            b_cache_we0 <= ap_const_logic_1;
        else 
            b_cache_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_V_1_ack_in <= c_V_1_state(1);
    c_V_1_ack_out <= c_V_TREADY;

    c_V_1_data_out_assign_proc : process(c_V_1_payload_A, c_V_1_payload_B, c_V_1_sel)
    begin
        if ((c_V_1_sel = ap_const_logic_1)) then 
            c_V_1_data_out <= c_V_1_payload_B;
        else 
            c_V_1_data_out <= c_V_1_payload_A;
        end if; 
    end process;

    c_V_1_load_A <= (not(c_V_1_sel_wr) and c_V_1_state_cmp_full);
    c_V_1_load_B <= (c_V_1_state_cmp_full and c_V_1_sel_wr);
    c_V_1_sel <= c_V_1_sel_rd;
    c_V_1_state_cmp_full <= '0' when (c_V_1_state = ap_const_lv2_1) else '1';

    c_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_predicate_op317_write_state26, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op317_write_state26 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            c_V_1_vld_in <= ap_const_logic_1;
        else 
            c_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    c_V_1_vld_out <= c_V_1_state(0);
    c_V_TDATA <= c_V_1_data_out;

    c_V_TDATA_blk_n_assign_proc : process(c_V_1_state, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, icmp_ln28_reg_1310_pp0_iter1_reg, icmp_ln30_reg_1338_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((icmp_ln30_reg_1338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln28_reg_1310_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln30_reg_1338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln28_reg_1310_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            c_V_TDATA_blk_n <= c_V_1_state(1);
        else 
            c_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    c_V_TVALID <= c_V_1_state(0);
    i_1_fu_604_p2 <= std_logic_vector(unsigned(i_0_reg_459) + unsigned(ap_const_lv4_1));
    i_fu_752_p2 <= std_logic_vector(unsigned(i1_0_reg_470) + unsigned(ap_const_lv4_1));
    icmp_ln16_fu_598_p2 <= "1" when (i_0_reg_459 = ap_const_lv4_A) else "0";
    icmp_ln17_fu_610_p2 <= "1" when (zext_ln16_fu_594_p1 = n_read_reg_1116) else "0";
    icmp_ln20_1_fu_540_p2 <= "1" when (n_0_data_out = ap_const_lv32_1) else "0";
    icmp_ln20_2_fu_546_p2 <= "1" when (n_0_data_out = ap_const_lv32_2) else "0";
    icmp_ln20_3_fu_552_p2 <= "1" when (n_0_data_out = ap_const_lv32_3) else "0";
    icmp_ln20_4_fu_558_p2 <= "1" when (n_0_data_out = ap_const_lv32_4) else "0";
    icmp_ln20_5_fu_564_p2 <= "1" when (n_0_data_out = ap_const_lv32_5) else "0";
    icmp_ln20_6_fu_570_p2 <= "1" when (n_0_data_out = ap_const_lv32_6) else "0";
    icmp_ln20_7_fu_576_p2 <= "1" when (n_0_data_out = ap_const_lv32_7) else "0";
    icmp_ln20_8_fu_582_p2 <= "1" when (n_0_data_out = ap_const_lv32_8) else "0";
    icmp_ln20_9_fu_588_p2 <= "1" when (n_0_data_out = ap_const_lv32_9) else "0";
    icmp_ln20_fu_534_p2 <= "1" when (n_0_data_out = ap_const_lv32_0) else "0";
    icmp_ln26_fu_746_p2 <= "1" when (i1_0_reg_470 = ap_const_lv4_A) else "0";
    icmp_ln27_fu_762_p2 <= "1" when (zext_ln26_fu_758_p1 = n_read_reg_1116) else "0";
    icmp_ln28_fu_889_p2 <= "1" when (ap_phi_mux_j2_0_phi_fu_485_p4 = ap_const_lv4_A) else "0";
    icmp_ln30_fu_917_p2 <= "1" when (zext_ln28_3_fu_913_p1 = n_read_reg_1116) else "0";
    j_fu_895_p2 <= std_logic_vector(unsigned(ap_phi_mux_j2_0_phi_fu_485_p4) + unsigned(ap_const_lv4_1));
    mul_ln36_1_fu_971_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_cache_load_1_reg_1225) * signed(reg_529))), 32));
    mul_ln36_2_fu_1004_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_cache_load_2_reg_1240) * signed(reg_524))), 32));
    mul_ln36_3_fu_1009_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_cache_load_3_reg_1245) * signed(reg_529))), 32));
    mul_ln36_4_fu_1043_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_cache_load_4_reg_1260) * signed(reg_524))), 32));
    mul_ln36_5_fu_1048_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_cache_load_5_reg_1265) * signed(reg_529))), 32));
    mul_ln36_6_fu_1076_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_cache_load_6_reg_1280) * signed(reg_524))), 32));
    mul_ln36_7_fu_1081_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_cache_load_7_reg_1285) * signed(reg_529))), 32));
    mul_ln36_8_fu_1095_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_cache_load_8_reg_1300) * signed(reg_524))), 32));
    mul_ln36_9_fu_1100_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_cache_load_9_reg_1305) * signed(reg_529))), 32));
    mul_ln36_fu_966_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_cache_load_reg_1220) * signed(reg_524))), 32));
    n_0_ack_in <= n_0_state(1);

    n_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, n_0_vld_out)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (n_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_0_ack_out <= ap_const_logic_1;
        else 
            n_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    n_0_data_out_assign_proc : process(n_0_payload_A, n_0_payload_B, n_0_sel)
    begin
        if ((n_0_sel = ap_const_logic_1)) then 
            n_0_data_out <= n_0_payload_B;
        else 
            n_0_data_out <= n_0_payload_A;
        end if; 
    end process;

    n_0_load_A <= (n_0_state_cmp_full and not(n_0_sel_wr));
    n_0_load_B <= (n_0_state_cmp_full and n_0_sel_wr);
    n_0_sel <= n_0_sel_rd;
    n_0_state_cmp_full <= '0' when (n_0_state = ap_const_lv2_1) else '1';
    n_0_vld_in <= n_TVALID;
    n_0_vld_out <= n_0_state(0);

    n_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, n_0_state)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_TDATA_blk_n <= n_0_state(0);
        else 
            n_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    n_TREADY <= n_0_state(1);
    or_ln21_fu_647_p2 <= (ap_const_lv7_1 or add_ln21_reg_1174);
    or_ln36_1_fu_938_p3 <= (ap_const_lv3_5 & ap_phi_mux_j2_0_phi_fu_485_p4);
    or_ln36_fu_798_p2 <= (ap_const_lv7_1 or add_ln36_fu_787_p2);
        sext_ln36_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_17_fu_986_p2),6));

    shl_ln1_fu_767_p3 <= (i1_0_reg_470 & ap_const_lv3_0);
    shl_ln21_1_fu_623_p3 <= (i_0_reg_459 & ap_const_lv1_0);
    shl_ln36_1_fu_775_p3 <= (i1_0_reg_470 & ap_const_lv1_0);
    shl_ln_fu_615_p3 <= (i_0_reg_459 & ap_const_lv3_0);
    zext_ln16_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_459),32));
    zext_ln21_10_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln21_1_fu_623_p3),7));
    zext_ln21_1_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln21_fu_647_p2),64));
    zext_ln21_2_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_1_fu_658_p2),64));
    zext_ln21_3_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_2_fu_669_p2),64));
    zext_ln21_4_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_3_fu_680_p2),64));
    zext_ln21_5_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_4_fu_691_p2),64));
    zext_ln21_6_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_5_fu_702_p2),64));
    zext_ln21_7_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_6_fu_713_p2),64));
    zext_ln21_8_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_7_fu_724_p2),64));
    zext_ln21_9_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_8_fu_735_p2),64));
    zext_ln21_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_635_p2),64));
    zext_ln26_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_470),32));
    zext_ln28_1_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j2_0_phi_fu_485_p4),6));
    zext_ln28_2_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j2_0_phi_fu_485_p4),5));
    zext_ln28_3_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j2_0_phi_fu_485_p4),32));
    zext_ln28_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j2_0_phi_fu_485_p4),7));
    zext_ln36_10_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_fu_798_p2),64));
    zext_ln36_11_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_fu_927_p2),64));
    zext_ln36_12_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_11_fu_946_p2),64));
    zext_ln36_13_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_13_fu_956_p2),64));
    zext_ln36_14_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_15_fu_976_p2),64));
    zext_ln36_15_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln36_fu_991_p1),64));
    zext_ln36_16_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_19_fu_1014_p2),64));
    zext_ln36_17_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_21_fu_1024_p2),64));
    zext_ln36_18_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_1_reg_1352),64));
    zext_ln36_19_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_24_fu_1057_p2),64));
    zext_ln36_1_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j2_0_phi_fu_485_p4),64));
    zext_ln36_20_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln36_1_fu_775_p3),7));
    zext_ln36_2_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_2_fu_809_p2),64));
    zext_ln36_3_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_3_fu_819_p2),64));
    zext_ln36_4_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_4_fu_829_p2),64));
    zext_ln36_5_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_5_fu_839_p2),64));
    zext_ln36_6_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_6_fu_849_p2),64));
    zext_ln36_7_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_7_fu_859_p2),64));
    zext_ln36_8_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_8_fu_869_p2),64));
    zext_ln36_9_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_9_fu_879_p2),64));
    zext_ln36_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_787_p2),64));
end behav;
