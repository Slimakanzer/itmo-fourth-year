// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mul,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=54,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=299,HLS_SYN_LUT=476,HLS_VERSION=2019_1}" *)

module mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V_dout,
        a_V_empty_n,
        a_V_read,
        b_V_dout,
        b_V_empty_n,
        b_V_read,
        c_V_din,
        c_V_full_n,
        c_V_write,
        n
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a_V_dout;
input   a_V_empty_n;
output   a_V_read;
input  [31:0] b_V_dout;
input   b_V_empty_n;
output   b_V_read;
output  [31:0] c_V_din;
input   c_V_full_n;
output   c_V_write;
input  [31:0] n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_V_read;
reg b_V_read;
reg c_V_write;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    a_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln14_fu_284_p2;
wire   [0:0] icmp_ln15_fu_296_p2;
reg    b_V_blk_n;
reg    c_V_blk_n;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln28_fu_390_p2;
wire   [0:0] icmp_ln27_fu_378_p2;
wire   [2:0] i_fu_253_p2;
reg   [2:0] i_reg_448;
wire    ap_CS_fsm_state2;
wire   [3:0] shl_ln_fu_268_p3;
reg   [3:0] shl_ln_reg_456;
wire   [0:0] icmp_ln12_fu_247_p2;
wire   [0:0] icmp_ln13_fu_259_p2;
wire   [2:0] j_fu_290_p2;
reg    ap_predicate_op46_read_state3;
reg    ap_predicate_op51_read_state3;
reg    ap_block_state3;
wire   [2:0] i_1_fu_322_p2;
reg   [2:0] i_1_reg_475;
wire    ap_CS_fsm_state4;
wire   [3:0] shl_ln1_fu_337_p3;
reg   [3:0] shl_ln1_reg_483;
wire   [0:0] icmp_ln21_fu_316_p2;
wire   [0:0] icmp_ln22_fu_328_p2;
wire   [3:0] zext_ln23_fu_345_p1;
reg   [3:0] zext_ln23_reg_488;
wire    ap_CS_fsm_state5;
wire   [2:0] j_1_fu_359_p2;
reg   [2:0] j_1_reg_496;
wire   [2:0] k_fu_384_p2;
reg   [2:0] k_reg_507;
reg    ap_predicate_op106_write_state6;
reg    ap_block_state6;
wire   [31:0] a_cache_q0;
reg  signed [31:0] a_cache_load_reg_525;
wire    ap_CS_fsm_state7;
wire   [31:0] b_cache_q0;
reg  signed [31:0] b_cache_load_reg_530;
wire   [31:0] mul_ln29_fu_427_p2;
reg   [31:0] mul_ln29_reg_535;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_3_fu_431_p2;
wire    ap_CS_fsm_state9;
reg   [3:0] a_cache_address0;
reg    a_cache_ce0;
reg    a_cache_we0;
reg   [3:0] b_cache_address0;
reg    b_cache_ce0;
reg    b_cache_we0;
reg   [2:0] i_0_reg_175;
reg   [2:0] j_0_reg_186;
reg   [2:0] i1_0_reg_197;
wire   [0:0] icmp_ln24_fu_365_p2;
wire   [0:0] icmp_ln23_fu_353_p2;
reg   [2:0] j2_0_reg_208;
reg   [31:0] tmp_2_reg_219;
reg   [2:0] k_0_reg_232;
wire   [63:0] zext_ln16_fu_306_p1;
wire   [63:0] zext_ln29_fu_400_p1;
wire   [63:0] zext_ln29_1_fu_422_p1;
wire   [31:0] zext_ln12_fu_243_p1;
wire   [1:0] trunc_ln16_fu_264_p1;
wire   [31:0] zext_ln14_1_fu_280_p1;
wire   [3:0] zext_ln14_fu_276_p1;
wire   [3:0] add_ln16_fu_301_p2;
wire   [31:0] zext_ln21_fu_312_p1;
wire   [1:0] trunc_ln29_fu_333_p1;
wire   [31:0] zext_ln23_1_fu_349_p1;
wire   [31:0] zext_ln27_1_fu_374_p1;
wire   [3:0] zext_ln27_fu_370_p1;
wire   [3:0] add_ln29_fu_395_p2;
wire   [1:0] trunc_ln29_1_fu_405_p1;
wire   [3:0] shl_ln29_1_fu_409_p3;
wire   [3:0] add_ln29_1_fu_417_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

mul_a_cache #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
a_cache_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_cache_address0),
    .ce0(a_cache_ce0),
    .we0(a_cache_we0),
    .d0(a_V_dout),
    .q0(a_cache_q0)
);

mul_a_cache #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
b_cache_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_cache_address0),
    .ce0(b_cache_ce0),
    .we0(b_cache_we0),
    .d0(b_V_dout),
    .q0(b_cache_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((icmp_ln23_fu_353_p2 == 1'd1) | (icmp_ln24_fu_365_p2 == 1'd1)))) begin
        i1_0_reg_197 <= i_1_reg_475;
    end else if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln13_fu_259_p2 == 1'd1) | (icmp_ln12_fu_247_p2 == 1'd1)))) begin
        i1_0_reg_197 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3) & ((icmp_ln15_fu_296_p2 == 1'd1) | (icmp_ln14_fu_284_p2 == 1'd1)))) begin
        i_0_reg_175 <= i_reg_448;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_175 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_328_p2 == 1'd0) & (icmp_ln21_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j2_0_reg_208 <= 3'd0;
    end else if ((~((c_V_full_n == 1'b0) & (ap_predicate_op106_write_state6 == 1'b1)) & (1'b1 == ap_CS_fsm_state6) & ((icmp_ln27_fu_378_p2 == 1'd1) | (icmp_ln28_fu_390_p2 == 1'd1)))) begin
        j2_0_reg_208 <= j_1_reg_496;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_259_p2 == 1'd0) & (icmp_ln12_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_186 <= 3'd0;
    end else if ((~(((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1))) & (icmp_ln15_fu_296_p2 == 1'd0) & (icmp_ln14_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_186 <= j_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_353_p2 == 1'd0) & (icmp_ln24_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_0_reg_232 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k_0_reg_232 <= k_reg_507;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_353_p2 == 1'd0) & (icmp_ln24_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_2_reg_219 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_2_reg_219 <= tmp_3_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_cache_load_reg_525 <= a_cache_q0;
        b_cache_load_reg_530 <= b_cache_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_475 <= i_1_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_448 <= i_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_496 <= j_1_fu_359_p2;
        zext_ln23_reg_488[2 : 0] <= zext_ln23_fu_345_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((c_V_full_n == 1'b0) & (ap_predicate_op106_write_state6 == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
        k_reg_507 <= k_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln29_reg_535 <= mul_ln29_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_328_p2 == 1'd0) & (icmp_ln21_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln1_reg_483[3 : 2] <= shl_ln1_fu_337_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_259_p2 == 1'd0) & (icmp_ln12_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_456[3 : 2] <= shl_ln_fu_268_p3[3 : 2];
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_296_p2 == 1'd0) & (icmp_ln14_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        a_V_blk_n = a_V_empty_n;
    end else begin
        a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1))) & (ap_predicate_op46_read_state3 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        a_V_read = 1'b1;
    end else begin
        a_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_cache_address0 = zext_ln29_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_cache_address0 = zext_ln16_fu_306_p1;
    end else begin
        a_cache_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((c_V_full_n == 1'b0) & (ap_predicate_op106_write_state6 == 1'b1)) & (1'b1 == ap_CS_fsm_state6)) | (~(((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3)))) begin
        a_cache_ce0 = 1'b1;
    end else begin
        a_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1))) & (icmp_ln15_fu_296_p2 == 1'd0) & (icmp_ln14_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        a_cache_we0 = 1'b1;
    end else begin
        a_cache_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln22_fu_328_p2 == 1'd1) | (icmp_ln21_fu_316_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln22_fu_328_p2 == 1'd1) | (icmp_ln21_fu_316_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_296_p2 == 1'd0) & (icmp_ln14_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        b_V_blk_n = b_V_empty_n;
    end else begin
        b_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1))) & (ap_predicate_op51_read_state3 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        b_V_read = 1'b1;
    end else begin
        b_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_cache_address0 = zext_ln29_1_fu_422_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_cache_address0 = zext_ln16_fu_306_p1;
    end else begin
        b_cache_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((c_V_full_n == 1'b0) & (ap_predicate_op106_write_state6 == 1'b1)) & (1'b1 == ap_CS_fsm_state6)) | (~(((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3)))) begin
        b_cache_ce0 = 1'b1;
    end else begin
        b_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1))) & (icmp_ln15_fu_296_p2 == 1'd0) & (icmp_ln14_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        b_cache_we0 = 1'b1;
    end else begin
        b_cache_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln27_fu_378_p2 == 1'd1) | (icmp_ln28_fu_390_p2 == 1'd1)))) begin
        c_V_blk_n = c_V_full_n;
    end else begin
        c_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_V_full_n == 1'b0) & (ap_predicate_op106_write_state6 == 1'b1)) & (ap_predicate_op106_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        c_V_write = 1'b1;
    end else begin
        c_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln13_fu_259_p2 == 1'd1) | (icmp_ln12_fu_247_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3) & ((icmp_ln15_fu_296_p2 == 1'd1) | (icmp_ln14_fu_284_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1))) & (icmp_ln15_fu_296_p2 == 1'd0) & (icmp_ln14_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln22_fu_328_p2 == 1'd1) | (icmp_ln21_fu_316_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((icmp_ln23_fu_353_p2 == 1'd1) | (icmp_ln24_fu_365_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((c_V_full_n == 1'b0) & (ap_predicate_op106_write_state6 == 1'b1)) & (1'b1 == ap_CS_fsm_state6) & ((icmp_ln27_fu_378_p2 == 1'd1) | (icmp_ln28_fu_390_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((c_V_full_n == 1'b0) & (ap_predicate_op106_write_state6 == 1'b1)) & (icmp_ln27_fu_378_p2 == 1'd0) & (icmp_ln28_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_301_p2 = (zext_ln14_fu_276_p1 + shl_ln_reg_456);

assign add_ln29_1_fu_417_p2 = (zext_ln23_reg_488 + shl_ln29_1_fu_409_p3);

assign add_ln29_fu_395_p2 = (shl_ln1_reg_483 + zext_ln27_fu_370_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state3 = (((b_V_empty_n == 1'b0) & (ap_predicate_op51_read_state3 == 1'b1)) | ((1'b0 == a_V_empty_n) & (ap_predicate_op46_read_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state6 = ((c_V_full_n == 1'b0) & (ap_predicate_op106_write_state6 == 1'b1));
end

always @ (*) begin
    ap_predicate_op106_write_state6 = ((icmp_ln27_fu_378_p2 == 1'd1) | (icmp_ln28_fu_390_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op46_read_state3 = ((icmp_ln15_fu_296_p2 == 1'd0) & (icmp_ln14_fu_284_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op51_read_state3 = ((icmp_ln15_fu_296_p2 == 1'd0) & (icmp_ln14_fu_284_p2 == 1'd0));
end

assign c_V_din = tmp_2_reg_219;

assign i_1_fu_322_p2 = (i1_0_reg_197 + 3'd1);

assign i_fu_253_p2 = (i_0_reg_175 + 3'd1);

assign icmp_ln12_fu_247_p2 = ((i_0_reg_175 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_259_p2 = ((zext_ln12_fu_243_p1 == n) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_284_p2 = ((j_0_reg_186 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_296_p2 = ((zext_ln14_1_fu_280_p1 == n) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_316_p2 = ((i1_0_reg_197 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_328_p2 = ((zext_ln21_fu_312_p1 == n) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_353_p2 = ((j2_0_reg_208 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_365_p2 = ((zext_ln23_1_fu_349_p1 == n) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_378_p2 = ((k_0_reg_232 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_390_p2 = ((zext_ln27_1_fu_374_p1 == n) ? 1'b1 : 1'b0);

assign j_1_fu_359_p2 = (j2_0_reg_208 + 3'd1);

assign j_fu_290_p2 = (j_0_reg_186 + 3'd1);

assign k_fu_384_p2 = (k_0_reg_232 + 3'd1);

assign mul_ln29_fu_427_p2 = ($signed(a_cache_load_reg_525) * $signed(b_cache_load_reg_530));

assign shl_ln1_fu_337_p3 = {{trunc_ln29_fu_333_p1}, {2'd0}};

assign shl_ln29_1_fu_409_p3 = {{trunc_ln29_1_fu_405_p1}, {2'd0}};

assign shl_ln_fu_268_p3 = {{trunc_ln16_fu_264_p1}, {2'd0}};

assign tmp_3_fu_431_p2 = (tmp_2_reg_219 + mul_ln29_reg_535);

assign trunc_ln16_fu_264_p1 = i_0_reg_175[1:0];

assign trunc_ln29_1_fu_405_p1 = k_0_reg_232[1:0];

assign trunc_ln29_fu_333_p1 = i1_0_reg_197[1:0];

assign zext_ln12_fu_243_p1 = i_0_reg_175;

assign zext_ln14_1_fu_280_p1 = j_0_reg_186;

assign zext_ln14_fu_276_p1 = j_0_reg_186;

assign zext_ln16_fu_306_p1 = add_ln16_fu_301_p2;

assign zext_ln21_fu_312_p1 = i1_0_reg_197;

assign zext_ln23_1_fu_349_p1 = j2_0_reg_208;

assign zext_ln23_fu_345_p1 = j2_0_reg_208;

assign zext_ln27_1_fu_374_p1 = k_0_reg_232;

assign zext_ln27_fu_370_p1 = k_0_reg_232;

assign zext_ln29_1_fu_422_p1 = add_ln29_1_fu_417_p2;

assign zext_ln29_fu_400_p1 = add_ln29_fu_395_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_456[1:0] <= 2'b00;
    shl_ln1_reg_483[1:0] <= 2'b00;
    zext_ln23_reg_488[3] <= 1'b0;
end

endmodule //mul
