// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mul,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=212,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=30,HLS_SYN_FF=1292,HLS_SYN_LUT=1921,HLS_VERSION=2019_1}" *)

module mul (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V_TDATA,
        a_V_TVALID,
        a_V_TREADY,
        b_V_TDATA,
        b_V_TVALID,
        b_V_TREADY,
        c_V_TDATA,
        c_V_TVALID,
        c_V_TREADY,
        n_TDATA,
        n_TVALID,
        n_TREADY
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_pp0_stage0 = 24'd262144;
parameter    ap_ST_fsm_pp0_stage1 = 24'd524288;
parameter    ap_ST_fsm_pp0_stage2 = 24'd1048576;
parameter    ap_ST_fsm_pp0_stage3 = 24'd2097152;
parameter    ap_ST_fsm_pp0_stage4 = 24'd4194304;
parameter    ap_ST_fsm_state28 = 24'd8388608;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a_V_TDATA;
input   a_V_TVALID;
output   a_V_TREADY;
input  [31:0] b_V_TDATA;
input   b_V_TVALID;
output   b_V_TREADY;
output  [31:0] c_V_TDATA;
output   c_V_TVALID;
input   c_V_TREADY;
input  [31:0] n_TDATA;
input   n_TVALID;
output   n_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] a_V_0_data_out;
wire    a_V_0_vld_in;
wire    a_V_0_vld_out;
wire    a_V_0_ack_in;
reg    a_V_0_ack_out;
reg   [31:0] a_V_0_payload_A;
reg   [31:0] a_V_0_payload_B;
reg    a_V_0_sel_rd;
reg    a_V_0_sel_wr;
wire    a_V_0_sel;
wire    a_V_0_load_A;
wire    a_V_0_load_B;
reg   [1:0] a_V_0_state;
wire    a_V_0_state_cmp_full;
reg   [31:0] b_V_0_data_out;
wire    b_V_0_vld_in;
wire    b_V_0_vld_out;
wire    b_V_0_ack_in;
reg    b_V_0_ack_out;
reg   [31:0] b_V_0_payload_A;
reg   [31:0] b_V_0_payload_B;
reg    b_V_0_sel_rd;
reg    b_V_0_sel_wr;
wire    b_V_0_sel;
wire    b_V_0_load_A;
wire    b_V_0_load_B;
reg   [1:0] b_V_0_state;
wire    b_V_0_state_cmp_full;
reg   [31:0] c_V_1_data_out;
reg    c_V_1_vld_in;
wire    c_V_1_vld_out;
wire    c_V_1_ack_in;
wire    c_V_1_ack_out;
reg   [31:0] c_V_1_payload_A;
reg   [31:0] c_V_1_payload_B;
reg    c_V_1_sel_rd;
reg    c_V_1_sel_wr;
wire    c_V_1_sel;
wire    c_V_1_load_A;
wire    c_V_1_load_B;
reg   [1:0] c_V_1_state;
wire    c_V_1_state_cmp_full;
reg   [31:0] n_0_data_out;
wire    n_0_vld_in;
wire    n_0_vld_out;
wire    n_0_ack_in;
reg    n_0_ack_out;
reg   [31:0] n_0_payload_A;
reg   [31:0] n_0_payload_B;
reg    n_0_sel_rd;
reg    n_0_sel_wr;
wire    n_0_sel;
wire    n_0_load_A;
wire    n_0_load_B;
reg   [1:0] n_0_state;
wire    n_0_state_cmp_full;
reg    a_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln16_fu_598_p2;
wire   [0:0] icmp_ln17_fu_610_p2;
reg   [0:0] icmp_ln20_reg_1123;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    b_V_TDATA_blk_n;
reg    c_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln28_reg_1310;
reg   [0:0] icmp_ln28_reg_1310_pp0_iter1_reg;
reg   [0:0] icmp_ln30_reg_1338;
reg   [0:0] icmp_ln30_reg_1338_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg    n_TDATA_blk_n;
reg   [3:0] j2_0_reg_481;
wire   [31:0] b_cache_q0;
reg  signed [31:0] reg_524;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state20_pp0_stage1_iter0;
wire    ap_block_state25_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] b_cache_q1;
wire    ap_block_state21_pp0_stage2_iter0;
wire    ap_block_state26_pp0_stage2_iter1;
reg    ap_predicate_op317_write_state26;
reg    ap_block_state26_io;
reg    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln20_1_reg_1127;
reg   [0:0] icmp_ln20_2_reg_1131;
wire    ap_block_state22_pp0_stage3_iter0;
wire    ap_block_state27_pp0_stage3_iter1;
reg    ap_predicate_op318_write_state27;
reg    ap_block_state27_io;
reg    ap_block_pp0_stage3_11001;
reg   [0:0] icmp_ln20_3_reg_1135;
reg   [0:0] icmp_ln20_4_reg_1139;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state23_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [0:0] icmp_ln20_5_reg_1143;
reg   [0:0] icmp_ln20_6_reg_1147;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state19_pp0_stage0_iter0;
wire    ap_block_state24_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln20_7_reg_1151;
reg   [0:0] icmp_ln20_8_reg_1155;
reg  signed [31:0] reg_529;
reg   [0:0] icmp_ln20_9_reg_1159;
reg   [31:0] n_read_reg_1116;
reg    ap_block_state1;
wire   [0:0] icmp_ln20_fu_534_p2;
wire   [0:0] icmp_ln20_1_fu_540_p2;
wire   [0:0] icmp_ln20_2_fu_546_p2;
wire   [0:0] icmp_ln20_3_fu_552_p2;
wire   [0:0] icmp_ln20_4_fu_558_p2;
wire   [0:0] icmp_ln20_5_fu_564_p2;
wire   [0:0] icmp_ln20_6_fu_570_p2;
wire   [0:0] icmp_ln20_7_fu_576_p2;
wire   [0:0] icmp_ln20_8_fu_582_p2;
wire   [0:0] icmp_ln20_9_fu_588_p2;
wire   [3:0] i_1_fu_604_p2;
reg   [3:0] i_1_reg_1166;
reg    ap_predicate_op66_read_state2;
reg    ap_predicate_op70_read_state2;
reg    ap_block_state2;
wire   [6:0] add_ln21_fu_635_p2;
reg   [6:0] add_ln21_reg_1174;
wire   [3:0] i_fu_752_p2;
reg   [3:0] i_reg_1190;
wire    ap_CS_fsm_state13;
reg    ap_block_state13;
wire   [6:0] add_ln36_fu_787_p2;
reg   [6:0] add_ln36_reg_1198;
wire   [0:0] icmp_ln26_fu_746_p2;
wire   [0:0] icmp_ln27_fu_762_p2;
wire   [31:0] a_cache_q0;
reg  signed [31:0] a_cache_load_reg_1220;
wire    ap_CS_fsm_state14;
wire   [31:0] a_cache_q1;
reg  signed [31:0] a_cache_load_1_reg_1225;
reg  signed [31:0] a_cache_load_2_reg_1240;
wire    ap_CS_fsm_state15;
reg  signed [31:0] a_cache_load_3_reg_1245;
reg  signed [31:0] a_cache_load_4_reg_1260;
wire    ap_CS_fsm_state16;
reg  signed [31:0] a_cache_load_5_reg_1265;
reg  signed [31:0] a_cache_load_6_reg_1280;
wire    ap_CS_fsm_state17;
reg  signed [31:0] a_cache_load_7_reg_1285;
reg  signed [31:0] a_cache_load_8_reg_1300;
wire    ap_CS_fsm_state18;
reg  signed [31:0] a_cache_load_9_reg_1305;
wire   [0:0] icmp_ln28_fu_889_p2;
wire   [3:0] j_fu_895_p2;
reg   [3:0] j_reg_1314;
wire   [6:0] zext_ln28_fu_901_p1;
reg   [6:0] zext_ln28_reg_1319;
wire   [5:0] zext_ln28_1_fu_905_p1;
reg   [5:0] zext_ln28_1_reg_1326;
wire   [4:0] zext_ln28_2_fu_909_p1;
reg   [4:0] zext_ln28_2_reg_1332;
wire   [0:0] icmp_ln30_fu_917_p2;
wire   [6:0] or_ln36_1_fu_938_p3;
reg   [6:0] or_ln36_1_reg_1352;
wire   [31:0] mul_ln36_fu_966_p2;
reg   [31:0] mul_ln36_reg_1367;
wire   [31:0] mul_ln36_1_fu_971_p2;
reg   [31:0] mul_ln36_1_reg_1373;
wire   [31:0] add_ln36_10_fu_1000_p2;
reg   [31:0] add_ln36_10_reg_1388;
wire   [31:0] mul_ln36_2_fu_1004_p2;
reg   [31:0] mul_ln36_2_reg_1394;
wire   [31:0] mul_ln36_3_fu_1009_p2;
reg   [31:0] mul_ln36_3_reg_1399;
wire   [31:0] add_ln36_12_fu_1034_p2;
wire   [31:0] add_ln36_14_fu_1038_p2;
reg   [31:0] add_ln36_14_reg_1419;
wire   [31:0] mul_ln36_4_fu_1043_p2;
reg   [31:0] mul_ln36_4_reg_1425;
wire   [31:0] mul_ln36_5_fu_1048_p2;
reg   [31:0] mul_ln36_5_reg_1430;
wire   [31:0] add_ln36_16_fu_1067_p2;
wire   [31:0] add_ln36_18_fu_1071_p2;
reg   [31:0] add_ln36_18_reg_1450;
wire   [31:0] mul_ln36_6_fu_1076_p2;
reg   [31:0] mul_ln36_6_reg_1456;
wire   [31:0] mul_ln36_7_fu_1081_p2;
reg   [31:0] mul_ln36_7_reg_1461;
wire   [31:0] add_ln36_20_fu_1086_p2;
wire   [31:0] add_ln36_22_fu_1090_p2;
reg   [31:0] add_ln36_22_reg_1471;
wire   [31:0] mul_ln36_8_fu_1095_p2;
reg   [31:0] mul_ln36_8_reg_1477;
wire   [31:0] mul_ln36_9_fu_1100_p2;
reg   [31:0] mul_ln36_9_reg_1482;
wire    ap_block_pp0_stage0_subdone;
reg    ap_predicate_tran19to28_state19;
reg    ap_condition_pp0_exit_iter0_state19;
wire    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage3_subdone;
reg   [6:0] a_cache_address0;
reg    a_cache_ce0;
reg    a_cache_we0;
reg   [6:0] a_cache_address1;
reg    a_cache_ce1;
reg   [6:0] b_cache_address0;
reg    b_cache_ce0;
reg    b_cache_we0;
reg   [6:0] b_cache_address1;
reg    b_cache_ce1;
reg   [3:0] i_0_reg_459;
wire    ap_CS_fsm_state12;
reg   [3:0] i1_0_reg_470;
wire    ap_CS_fsm_state28;
reg   [3:0] ap_phi_mux_j2_0_phi_fu_485_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_tmp_5_phi_fu_497_p22;
reg   [31:0] ap_phi_reg_pp0_iter0_tmp_5_reg_492;
reg   [31:0] ap_phi_reg_pp0_iter1_tmp_5_reg_492;
wire   [31:0] add_ln36_23_fu_1105_p2;
wire   [31:0] add_ln36_25_fu_1110_p2;
wire   [63:0] zext_ln21_fu_641_p1;
wire   [63:0] zext_ln21_1_fu_652_p1;
wire   [63:0] zext_ln21_2_fu_663_p1;
wire   [63:0] zext_ln21_3_fu_674_p1;
wire   [63:0] zext_ln21_4_fu_685_p1;
wire   [63:0] zext_ln21_5_fu_696_p1;
wire   [63:0] zext_ln21_6_fu_707_p1;
wire   [63:0] zext_ln21_7_fu_718_p1;
wire   [63:0] zext_ln21_8_fu_729_p1;
wire   [63:0] zext_ln21_9_fu_740_p1;
wire   [63:0] zext_ln36_fu_793_p1;
wire   [63:0] zext_ln36_10_fu_804_p1;
wire   [63:0] zext_ln36_2_fu_814_p1;
wire   [63:0] zext_ln36_3_fu_824_p1;
wire   [63:0] zext_ln36_4_fu_834_p1;
wire   [63:0] zext_ln36_5_fu_844_p1;
wire   [63:0] zext_ln36_6_fu_854_p1;
wire   [63:0] zext_ln36_7_fu_864_p1;
wire   [63:0] zext_ln36_8_fu_874_p1;
wire   [63:0] zext_ln36_9_fu_884_p1;
wire   [63:0] zext_ln36_1_fu_922_p1;
wire   [63:0] zext_ln36_11_fu_933_p1;
wire   [63:0] zext_ln36_12_fu_951_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln36_13_fu_961_p1;
wire   [63:0] zext_ln36_14_fu_981_p1;
wire   [63:0] zext_ln36_15_fu_995_p1;
wire   [63:0] zext_ln36_16_fu_1019_p1;
wire   [63:0] zext_ln36_17_fu_1029_p1;
wire   [63:0] zext_ln36_18_fu_1053_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln36_19_fu_1062_p1;
reg    ap_block_state3;
reg    ap_block_state4;
reg    ap_block_state5;
reg    ap_block_state6;
reg    ap_block_state7;
reg    ap_block_state8;
reg    ap_block_state9;
reg    ap_block_state10;
reg    ap_block_state11;
wire    ap_block_pp0_stage2_01001;
wire   [31:0] zext_ln16_fu_594_p1;
wire   [4:0] shl_ln21_1_fu_623_p3;
wire   [6:0] zext_ln21_10_fu_631_p1;
wire   [6:0] shl_ln_fu_615_p3;
wire   [6:0] or_ln21_fu_647_p2;
wire   [6:0] add_ln21_1_fu_658_p2;
wire   [6:0] add_ln21_2_fu_669_p2;
wire   [6:0] add_ln21_3_fu_680_p2;
wire   [6:0] add_ln21_4_fu_691_p2;
wire   [6:0] add_ln21_5_fu_702_p2;
wire   [6:0] add_ln21_6_fu_713_p2;
wire   [6:0] add_ln21_7_fu_724_p2;
wire   [6:0] add_ln21_8_fu_735_p2;
wire   [31:0] zext_ln26_fu_758_p1;
wire   [4:0] shl_ln36_1_fu_775_p3;
wire   [6:0] zext_ln36_20_fu_783_p1;
wire   [6:0] shl_ln1_fu_767_p3;
wire   [6:0] or_ln36_fu_798_p2;
wire   [6:0] add_ln36_2_fu_809_p2;
wire   [6:0] add_ln36_3_fu_819_p2;
wire   [6:0] add_ln36_4_fu_829_p2;
wire   [6:0] add_ln36_5_fu_839_p2;
wire   [6:0] add_ln36_6_fu_849_p2;
wire   [6:0] add_ln36_7_fu_859_p2;
wire   [6:0] add_ln36_8_fu_869_p2;
wire   [6:0] add_ln36_9_fu_879_p2;
wire   [31:0] zext_ln28_3_fu_913_p1;
wire   [4:0] add_ln36_1_fu_927_p2;
wire   [4:0] add_ln36_11_fu_946_p2;
wire   [5:0] add_ln36_13_fu_956_p2;
wire   [5:0] add_ln36_15_fu_976_p2;
wire   [4:0] add_ln36_17_fu_986_p2;
wire  signed [5:0] sext_ln36_fu_991_p1;
wire   [6:0] add_ln36_19_fu_1014_p2;
wire   [6:0] add_ln36_21_fu_1024_p2;
wire   [6:0] add_ln36_24_fu_1057_p2;
reg   [23:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1544;
reg    ap_condition_1548;
reg    ap_condition_1555;
reg    ap_condition_1559;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 a_V_0_sel_rd = 1'b0;
#0 a_V_0_sel_wr = 1'b0;
#0 a_V_0_state = 2'd0;
#0 b_V_0_sel_rd = 1'b0;
#0 b_V_0_sel_wr = 1'b0;
#0 b_V_0_state = 2'd0;
#0 c_V_1_sel_rd = 1'b0;
#0 c_V_1_sel_wr = 1'b0;
#0 c_V_1_state = 2'd0;
#0 n_0_sel_rd = 1'b0;
#0 n_0_sel_wr = 1'b0;
#0 n_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

mul_a_cache #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
a_cache_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(a_cache_address0),
    .ce0(a_cache_ce0),
    .we0(a_cache_we0),
    .d0(a_V_0_data_out),
    .q0(a_cache_q0),
    .address1(a_cache_address1),
    .ce1(a_cache_ce1),
    .q1(a_cache_q1)
);

mul_a_cache #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
b_cache_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(b_cache_address0),
    .ce0(b_cache_ce0),
    .we0(b_cache_we0),
    .d0(b_V_0_data_out),
    .q0(b_cache_q0),
    .address1(b_cache_address1),
    .ce1(b_cache_ce1),
    .q1(b_cache_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == a_V_0_ack_out) & (1'b1 == a_V_0_vld_out))) begin
            a_V_0_sel_rd <= ~a_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == a_V_0_ack_in) & (1'b1 == a_V_0_vld_in))) begin
            a_V_0_sel_wr <= ~a_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == a_V_0_state) & (1'b0 == a_V_0_vld_in)) | ((2'd3 == a_V_0_state) & (1'b0 == a_V_0_vld_in) & (1'b1 == a_V_0_ack_out)))) begin
            a_V_0_state <= 2'd2;
        end else if ((((2'd1 == a_V_0_state) & (1'b0 == a_V_0_ack_out)) | ((2'd3 == a_V_0_state) & (1'b0 == a_V_0_ack_out) & (1'b1 == a_V_0_vld_in)))) begin
            a_V_0_state <= 2'd1;
        end else if (((~((1'b0 == a_V_0_vld_in) & (1'b1 == a_V_0_ack_out)) & ~((1'b0 == a_V_0_ack_out) & (1'b1 == a_V_0_vld_in)) & (2'd3 == a_V_0_state)) | ((2'd1 == a_V_0_state) & (1'b1 == a_V_0_ack_out)) | ((2'd2 == a_V_0_state) & (1'b1 == a_V_0_vld_in)))) begin
            a_V_0_state <= 2'd3;
        end else begin
            a_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_V_0_sel_rd <= 1'b0;
    end else begin
        if (((b_V_0_ack_out == 1'b1) & (b_V_0_vld_out == 1'b1))) begin
            b_V_0_sel_rd <= ~b_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_V_0_sel_wr <= 1'b0;
    end else begin
        if (((b_V_0_ack_in == 1'b1) & (b_V_0_vld_in == 1'b1))) begin
            b_V_0_sel_wr <= ~b_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_V_0_state <= 2'd0;
    end else begin
        if ((((b_V_0_state == 2'd2) & (b_V_0_vld_in == 1'b0)) | ((b_V_0_state == 2'd3) & (b_V_0_vld_in == 1'b0) & (b_V_0_ack_out == 1'b1)))) begin
            b_V_0_state <= 2'd2;
        end else if ((((b_V_0_state == 2'd1) & (b_V_0_ack_out == 1'b0)) | ((b_V_0_state == 2'd3) & (b_V_0_ack_out == 1'b0) & (b_V_0_vld_in == 1'b1)))) begin
            b_V_0_state <= 2'd1;
        end else if (((~((b_V_0_vld_in == 1'b0) & (b_V_0_ack_out == 1'b1)) & ~((b_V_0_ack_out == 1'b0) & (b_V_0_vld_in == 1'b1)) & (b_V_0_state == 2'd3)) | ((b_V_0_state == 2'd1) & (b_V_0_ack_out == 1'b1)) | ((b_V_0_state == 2'd2) & (b_V_0_vld_in == 1'b1)))) begin
            b_V_0_state <= 2'd3;
        end else begin
            b_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_V_1_sel_rd <= 1'b0;
    end else begin
        if (((c_V_1_ack_out == 1'b1) & (c_V_1_vld_out == 1'b1))) begin
            c_V_1_sel_rd <= ~c_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_V_1_sel_wr <= 1'b0;
    end else begin
        if (((c_V_1_ack_in == 1'b1) & (c_V_1_vld_in == 1'b1))) begin
            c_V_1_sel_wr <= ~c_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_V_1_state <= 2'd0;
    end else begin
        if ((((c_V_1_state == 2'd2) & (c_V_1_vld_in == 1'b0)) | ((c_V_1_state == 2'd3) & (c_V_1_vld_in == 1'b0) & (c_V_1_ack_out == 1'b1)))) begin
            c_V_1_state <= 2'd2;
        end else if ((((c_V_1_state == 2'd1) & (c_V_TREADY == 1'b0)) | ((c_V_1_state == 2'd3) & (c_V_TREADY == 1'b0) & (c_V_1_vld_in == 1'b1)))) begin
            c_V_1_state <= 2'd1;
        end else if (((~((c_V_1_vld_in == 1'b0) & (c_V_1_ack_out == 1'b1)) & ~((c_V_TREADY == 1'b0) & (c_V_1_vld_in == 1'b1)) & (c_V_1_state == 2'd3)) | ((c_V_1_state == 2'd1) & (c_V_1_ack_out == 1'b1)) | ((c_V_1_state == 2'd2) & (c_V_1_vld_in == 1'b1)))) begin
            c_V_1_state <= 2'd3;
        end else begin
            c_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        n_0_sel_rd <= 1'b0;
    end else begin
        if (((n_0_ack_out == 1'b1) & (n_0_vld_out == 1'b1))) begin
            n_0_sel_rd <= ~n_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        n_0_sel_wr <= 1'b0;
    end else begin
        if (((n_0_ack_in == 1'b1) & (n_0_vld_in == 1'b1))) begin
            n_0_sel_wr <= ~n_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        n_0_state <= 2'd0;
    end else begin
        if ((((n_0_state == 2'd2) & (n_0_vld_in == 1'b0)) | ((n_0_state == 2'd3) & (n_0_vld_in == 1'b0) & (n_0_ack_out == 1'b1)))) begin
            n_0_state <= 2'd2;
        end else if ((((n_0_state == 2'd1) & (n_0_ack_out == 1'b0)) | ((n_0_state == 2'd3) & (n_0_ack_out == 1'b0) & (n_0_vld_in == 1'b1)))) begin
            n_0_state <= 2'd1;
        end else if (((~((n_0_vld_in == 1'b0) & (n_0_ack_out == 1'b1)) & ~((n_0_ack_out == 1'b0) & (n_0_vld_in == 1'b1)) & (n_0_state == 2'd3)) | ((n_0_state == 2'd1) & (n_0_ack_out == 1'b1)) | ((n_0_state == 2'd2) & (n_0_vld_in == 1'b1)))) begin
            n_0_state <= 2'd3;
        end else begin
            n_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1559)) begin
            ap_phi_reg_pp0_iter0_tmp_5_reg_492 <= add_ln36_10_fu_1000_p2;
        end else if ((1'b1 == ap_condition_1555)) begin
            ap_phi_reg_pp0_iter0_tmp_5_reg_492 <= mul_ln36_reg_1367;
        end else if ((1'b1 == ap_condition_1548)) begin
            ap_phi_reg_pp0_iter0_tmp_5_reg_492 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_8_reg_1155 == 1'd1) & (icmp_ln20_7_reg_1151 == 1'd0) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338_pp0_iter1_reg == 1'd0) & (icmp_ln28_reg_1310_pp0_iter1_reg == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_22_fu_1090_p2;
    end else if (((icmp_ln20_7_reg_1151 == 1'd1) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338_pp0_iter1_reg == 1'd0) & (icmp_ln28_reg_1310_pp0_iter1_reg == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_20_fu_1086_p2;
    end else if (((icmp_ln20_6_reg_1147 == 1'd1) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_18_fu_1071_p2;
    end else if (((icmp_ln20_5_reg_1143 == 1'd1) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_16_fu_1067_p2;
    end else if (((icmp_ln20_4_reg_1139 == 1'd1) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_14_fu_1038_p2;
    end else if (((icmp_ln20_3_reg_1135 == 1'd1) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= add_ln36_12_fu_1034_p2;
    end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_tmp_5_reg_492 <= ap_phi_reg_pp0_iter0_tmp_5_reg_492;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i1_0_reg_470 <= i_reg_1190;
    end else if ((~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (1'b1 == ap_CS_fsm_state2) & ((icmp_ln17_fu_610_p2 == 1'd1) | (icmp_ln16_fu_598_p2 == 1'd1)))) begin
        i1_0_reg_470 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_reg_459 <= i_1_reg_1166;
    end else if ((~((ap_start == 1'b0) | (n_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_459 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        j2_0_reg_481 <= 4'd0;
    end else if (((icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j2_0_reg_481 <= j_reg_1314;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln20_8_reg_1155 == 1'd0) & (icmp_ln20_7_reg_1151 == 1'd0) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_524 <= b_cache_q1;
    end else if (((icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_524 <= b_cache_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln20_7_reg_1151 == 1'd0) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln20_9_reg_1159 == 1'd0) & (icmp_ln20_8_reg_1155 == 1'd0) & (icmp_ln20_7_reg_1151 == 1'd0) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_529 <= b_cache_q0;
    end else if (((icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_529 <= b_cache_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_V_0_load_A)) begin
        a_V_0_payload_A <= a_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_V_0_load_B)) begin
        a_V_0_payload_B <= a_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        a_cache_load_1_reg_1225 <= a_cache_q1;
        a_cache_load_reg_1220 <= a_cache_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        a_cache_load_2_reg_1240 <= a_cache_q1;
        a_cache_load_3_reg_1245 <= a_cache_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        a_cache_load_4_reg_1260 <= a_cache_q1;
        a_cache_load_5_reg_1265 <= a_cache_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        a_cache_load_6_reg_1280 <= a_cache_q1;
        a_cache_load_7_reg_1285 <= a_cache_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        a_cache_load_8_reg_1300 <= a_cache_q1;
        a_cache_load_9_reg_1305 <= a_cache_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (icmp_ln17_fu_610_p2 == 1'd0) & (icmp_ln16_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln21_reg_1174[6 : 1] <= add_ln21_fu_635_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln36_10_reg_1388 <= add_ln36_10_fu_1000_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln36_14_reg_1419 <= add_ln36_14_fu_1038_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln36_18_reg_1450 <= add_ln36_18_fu_1071_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_7_reg_1151 == 1'd0) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338_pp0_iter1_reg == 1'd0) & (icmp_ln28_reg_1310_pp0_iter1_reg == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln36_22_reg_1471 <= add_ln36_22_fu_1090_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((c_V_1_state == 2'd1) | ((c_V_1_state == 2'd3) & (c_V_TREADY == 1'b0))) & (icmp_ln27_fu_762_p2 == 1'd0) & (icmp_ln26_fu_746_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        add_ln36_reg_1198[6 : 1] <= add_ln36_fu_787_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((b_V_0_load_A == 1'b1)) begin
        b_V_0_payload_A <= b_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_V_0_load_B == 1'b1)) begin
        b_V_0_payload_B <= b_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((c_V_1_load_A == 1'b1)) begin
        c_V_1_payload_A <= ap_phi_mux_tmp_5_phi_fu_497_p22;
    end
end

always @ (posedge ap_clk) begin
    if ((c_V_1_load_B == 1'b1)) begin
        c_V_1_payload_B <= ap_phi_mux_tmp_5_phi_fu_497_p22;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_1166 <= i_1_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((c_V_1_state == 2'd1) | ((c_V_1_state == 2'd3) & (c_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state13))) begin
        i_reg_1190 <= i_fu_752_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (n_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln20_1_reg_1127 <= icmp_ln20_1_fu_540_p2;
        icmp_ln20_2_reg_1131 <= icmp_ln20_2_fu_546_p2;
        icmp_ln20_3_reg_1135 <= icmp_ln20_3_fu_552_p2;
        icmp_ln20_4_reg_1139 <= icmp_ln20_4_fu_558_p2;
        icmp_ln20_5_reg_1143 <= icmp_ln20_5_fu_564_p2;
        icmp_ln20_6_reg_1147 <= icmp_ln20_6_fu_570_p2;
        icmp_ln20_7_reg_1151 <= icmp_ln20_7_fu_576_p2;
        icmp_ln20_8_reg_1155 <= icmp_ln20_8_fu_582_p2;
        icmp_ln20_9_reg_1159 <= icmp_ln20_9_fu_588_p2;
        icmp_ln20_reg_1123 <= icmp_ln20_fu_534_p2;
        n_read_reg_1116 <= n_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln28_reg_1310 <= icmp_ln28_fu_889_p2;
        icmp_ln28_reg_1310_pp0_iter1_reg <= icmp_ln28_reg_1310;
        icmp_ln30_reg_1338_pp0_iter1_reg <= icmp_ln30_reg_1338;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_889_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_reg_1338 <= icmp_ln30_fu_917_p2;
        zext_ln28_1_reg_1326[3 : 0] <= zext_ln28_1_fu_905_p1[3 : 0];
        zext_ln28_2_reg_1332[3 : 0] <= zext_ln28_2_fu_909_p1[3 : 0];
        zext_ln28_reg_1319[3 : 0] <= zext_ln28_fu_901_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_1314 <= j_fu_895_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_ln36_1_reg_1373 <= mul_ln36_1_fu_971_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_ln36_2_reg_1394 <= mul_ln36_2_fu_1004_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_ln36_3_reg_1399 <= mul_ln36_3_fu_1009_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_ln36_4_reg_1425 <= mul_ln36_4_fu_1043_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_ln36_5_reg_1430 <= mul_ln36_5_fu_1048_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln36_6_reg_1456 <= mul_ln36_6_fu_1076_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_7_reg_1151 == 1'd0) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln36_7_reg_1461 <= mul_ln36_7_fu_1081_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_8_reg_1155 == 1'd0) & (icmp_ln20_7_reg_1151 == 1'd0) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338_pp0_iter1_reg == 1'd0) & (icmp_ln28_reg_1310_pp0_iter1_reg == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln36_8_reg_1477 <= mul_ln36_8_fu_1095_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_9_reg_1159 == 1'd0) & (icmp_ln20_8_reg_1155 == 1'd0) & (icmp_ln20_7_reg_1151 == 1'd0) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338_pp0_iter1_reg == 1'd0) & (icmp_ln28_reg_1310_pp0_iter1_reg == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln36_9_reg_1482 <= mul_ln36_9_fu_1100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_ln36_reg_1367 <= mul_ln36_fu_966_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((n_0_load_A == 1'b1)) begin
        n_0_payload_A <= n_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((n_0_load_B == 1'b1)) begin
        n_0_payload_B <= n_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_917_p2 == 1'd0) & (icmp_ln28_fu_889_p2 == 1'd0) & (icmp_ln20_8_reg_1155 == 1'd0) & (icmp_ln20_7_reg_1151 == 1'd0) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln36_1_reg_1352[3 : 0] <= or_ln36_1_fu_938_p3[3 : 0];
    end
end

always @ (*) begin
    if (((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (ap_predicate_op66_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        a_V_0_ack_out = 1'b1;
    end else begin
        a_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == a_V_0_sel)) begin
        a_V_0_data_out = a_V_0_payload_B;
    end else begin
        a_V_0_data_out = a_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln20_reg_1123 == 1'd0) & (icmp_ln17_fu_610_p2 == 1'd0) & (icmp_ln16_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        a_V_TDATA_blk_n = a_V_0_state[1'd0];
    end else begin
        a_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        a_cache_address0 = zext_ln36_9_fu_884_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        a_cache_address0 = zext_ln36_7_fu_864_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        a_cache_address0 = zext_ln36_5_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        a_cache_address0 = zext_ln36_3_fu_824_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        a_cache_address0 = zext_ln36_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        a_cache_address0 = zext_ln21_9_fu_740_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        a_cache_address0 = zext_ln21_8_fu_729_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        a_cache_address0 = zext_ln21_7_fu_718_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        a_cache_address0 = zext_ln21_6_fu_707_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_cache_address0 = zext_ln21_5_fu_696_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_cache_address0 = zext_ln21_4_fu_685_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_cache_address0 = zext_ln21_3_fu_674_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_cache_address0 = zext_ln21_2_fu_663_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_cache_address0 = zext_ln21_1_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_cache_address0 = zext_ln21_fu_641_p1;
    end else begin
        a_cache_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        a_cache_address1 = zext_ln36_8_fu_874_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        a_cache_address1 = zext_ln36_6_fu_854_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        a_cache_address1 = zext_ln36_4_fu_834_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        a_cache_address1 = zext_ln36_2_fu_814_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        a_cache_address1 = zext_ln36_10_fu_804_p1;
    end else begin
        a_cache_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (~((c_V_1_state == 2'd1) | ((c_V_1_state == 2'd3) & (c_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state13)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (1'b1 == ap_CS_fsm_state2)))) begin
        a_cache_ce0 = 1'b1;
    end else begin
        a_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (~((c_V_1_state == 2'd1) | ((c_V_1_state == 2'd3) & (c_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state13)))) begin
        a_cache_ce1 = 1'b1;
    end else begin
        a_cache_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (icmp_ln20_reg_1123 == 1'd0) & (icmp_ln17_fu_610_p2 == 1'd0) & (icmp_ln16_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        a_cache_we0 = 1'b1;
    end else begin
        a_cache_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_predicate_tran19to28_state19 == 1'b1)) begin
        ap_condition_pp0_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((~((c_V_1_state == 2'd1) | ((c_V_1_state == 2'd3) & (c_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state13) & ((icmp_ln27_fu_762_p2 == 1'd1) | (icmp_ln26_fu_746_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j2_0_phi_fu_485_p4 = j_reg_1314;
    end else begin
        ap_phi_mux_j2_0_phi_fu_485_p4 = j2_0_reg_481;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1544)) begin
        if ((icmp_ln20_9_reg_1159 == 1'd0)) begin
            ap_phi_mux_tmp_5_phi_fu_497_p22 = add_ln36_25_fu_1110_p2;
        end else if ((icmp_ln20_9_reg_1159 == 1'd1)) begin
            ap_phi_mux_tmp_5_phi_fu_497_p22 = add_ln36_23_fu_1105_p2;
        end else begin
            ap_phi_mux_tmp_5_phi_fu_497_p22 = ap_phi_reg_pp0_iter1_tmp_5_reg_492;
        end
    end else begin
        ap_phi_mux_tmp_5_phi_fu_497_p22 = ap_phi_reg_pp0_iter1_tmp_5_reg_492;
    end
end

always @ (*) begin
    if ((~((c_V_1_state == 2'd1) | ((c_V_1_state == 2'd3) & (c_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state13) & ((icmp_ln27_fu_762_p2 == 1'd1) | (icmp_ln26_fu_746_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (ap_predicate_op70_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        b_V_0_ack_out = 1'b1;
    end else begin
        b_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((b_V_0_sel == 1'b1)) begin
        b_V_0_data_out = b_V_0_payload_B;
    end else begin
        b_V_0_data_out = b_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln20_reg_1123 == 1'd0) & (icmp_ln17_fu_610_p2 == 1'd0) & (icmp_ln16_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        b_V_TDATA_blk_n = b_V_0_state[1'd0];
    end else begin
        b_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_cache_address0 = zext_ln36_19_fu_1062_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        b_cache_address0 = zext_ln36_17_fu_1029_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        b_cache_address0 = zext_ln36_15_fu_995_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_cache_address0 = zext_ln36_13_fu_961_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_cache_address0 = zext_ln36_1_fu_922_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        b_cache_address0 = zext_ln21_9_fu_740_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        b_cache_address0 = zext_ln21_8_fu_729_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        b_cache_address0 = zext_ln21_7_fu_718_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        b_cache_address0 = zext_ln21_6_fu_707_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        b_cache_address0 = zext_ln21_5_fu_696_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        b_cache_address0 = zext_ln21_4_fu_685_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        b_cache_address0 = zext_ln21_3_fu_674_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_cache_address0 = zext_ln21_2_fu_663_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_cache_address0 = zext_ln21_1_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_cache_address0 = zext_ln21_fu_641_p1;
    end else begin
        b_cache_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            b_cache_address1 = zext_ln36_18_fu_1053_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            b_cache_address1 = zext_ln36_16_fu_1019_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            b_cache_address1 = zext_ln36_14_fu_981_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_cache_address1 = zext_ln36_12_fu_951_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_cache_address1 = zext_ln36_11_fu_933_p1;
        end else begin
            b_cache_address1 = 'bx;
        end
    end else begin
        b_cache_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (1'b1 == ap_CS_fsm_state2)))) begin
        b_cache_ce0 = 1'b1;
    end else begin
        b_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        b_cache_ce1 = 1'b1;
    end else begin
        b_cache_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (icmp_ln20_reg_1123 == 1'd0) & (icmp_ln17_fu_610_p2 == 1'd0) & (icmp_ln16_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        b_cache_we0 = 1'b1;
    end else begin
        b_cache_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((c_V_1_sel == 1'b1)) begin
        c_V_1_data_out = c_V_1_payload_B;
    end else begin
        c_V_1_data_out = c_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_predicate_op317_write_state26 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        c_V_1_vld_in = 1'b1;
    end else begin
        c_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_1338_pp0_iter1_reg == 1'd0) & (icmp_ln28_reg_1310_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln30_reg_1338_pp0_iter1_reg == 1'd0) & (icmp_ln28_reg_1310_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        c_V_TDATA_blk_n = c_V_1_state[1'd1];
    end else begin
        c_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (n_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_0_ack_out = 1'b1;
    end else begin
        n_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((n_0_sel == 1'b1)) begin
        n_0_data_out = n_0_payload_B;
    end else begin
        n_0_data_out = n_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_TDATA_blk_n = n_0_state[1'd0];
    end else begin
        n_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (n_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (1'b1 == ap_CS_fsm_state2) & ((icmp_ln17_fu_610_p2 == 1'd1) | (icmp_ln16_fu_598_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if ((~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (icmp_ln17_fu_610_p2 == 1'd0) & (icmp_ln16_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~(((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out))) & (1'b1 == ap_CS_fsm_state2) & (((icmp_ln20_1_reg_1127 == 1'd1) & (icmp_ln17_fu_610_p2 == 1'd0) & (icmp_ln16_fu_598_p2 == 1'd0)) | ((icmp_ln20_reg_1123 == 1'd1) & (icmp_ln17_fu_610_p2 == 1'd0) & (icmp_ln16_fu_598_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_2_reg_1131 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_2_reg_1131 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_3_reg_1135 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_3_reg_1135 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_4_reg_1139 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_4_reg_1139 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_5_reg_1143 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_5_reg_1143 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_6_reg_1147 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_6_reg_1147 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_7_reg_1151 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_7_reg_1151 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_8_reg_1155 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_8_reg_1155 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_9_reg_1159 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (icmp_ln20_9_reg_1159 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state13 : begin
            if ((~((c_V_1_state == 2'd1) | ((c_V_1_state == 2'd3) & (c_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state13) & ((icmp_ln27_fu_762_p2 == 1'd1) | (icmp_ln26_fu_746_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((c_V_1_state == 2'd1) | ((c_V_1_state == 2'd3) & (c_V_TREADY == 1'b0))) & (icmp_ln27_fu_762_p2 == 1'd0) & (icmp_ln26_fu_746_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_predicate_tran19to28_state19 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_predicate_tran19to28_state19 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_V_0_ack_in = a_V_0_state[1'd1];

assign a_V_0_load_A = (~a_V_0_sel_wr & a_V_0_state_cmp_full);

assign a_V_0_load_B = (a_V_0_state_cmp_full & a_V_0_sel_wr);

assign a_V_0_sel = a_V_0_sel_rd;

assign a_V_0_state_cmp_full = ((a_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign a_V_0_vld_in = a_V_TVALID;

assign a_V_0_vld_out = a_V_0_state[1'd0];

assign a_V_TREADY = a_V_0_state[1'd1];

assign add_ln21_1_fu_658_p2 = (add_ln21_reg_1174 + 7'd2);

assign add_ln21_2_fu_669_p2 = (add_ln21_reg_1174 + 7'd3);

assign add_ln21_3_fu_680_p2 = (add_ln21_reg_1174 + 7'd4);

assign add_ln21_4_fu_691_p2 = (add_ln21_reg_1174 + 7'd5);

assign add_ln21_5_fu_702_p2 = (add_ln21_reg_1174 + 7'd6);

assign add_ln21_6_fu_713_p2 = (add_ln21_reg_1174 + 7'd7);

assign add_ln21_7_fu_724_p2 = (add_ln21_reg_1174 + 7'd8);

assign add_ln21_8_fu_735_p2 = (add_ln21_reg_1174 + 7'd9);

assign add_ln21_fu_635_p2 = (zext_ln21_10_fu_631_p1 + shl_ln_fu_615_p3);

assign add_ln36_10_fu_1000_p2 = (mul_ln36_reg_1367 + mul_ln36_1_reg_1373);

assign add_ln36_11_fu_946_p2 = ($signed(zext_ln28_2_reg_1332) + $signed(5'd20));

assign add_ln36_12_fu_1034_p2 = (add_ln36_10_reg_1388 + mul_ln36_2_reg_1394);

assign add_ln36_13_fu_956_p2 = (zext_ln28_1_reg_1326 + 6'd30);

assign add_ln36_14_fu_1038_p2 = (add_ln36_12_fu_1034_p2 + mul_ln36_3_reg_1399);

assign add_ln36_15_fu_976_p2 = ($signed(zext_ln28_1_reg_1326) + $signed(6'd40));

assign add_ln36_16_fu_1067_p2 = (add_ln36_14_reg_1419 + mul_ln36_4_reg_1425);

assign add_ln36_17_fu_986_p2 = ($signed(zext_ln28_2_reg_1332) + $signed(5'd18));

assign add_ln36_18_fu_1071_p2 = (add_ln36_16_fu_1067_p2 + mul_ln36_5_reg_1430);

assign add_ln36_19_fu_1014_p2 = (zext_ln28_reg_1319 + 7'd60);

assign add_ln36_1_fu_927_p2 = (zext_ln28_2_fu_909_p1 + 5'd10);

assign add_ln36_20_fu_1086_p2 = (add_ln36_18_reg_1450 + mul_ln36_6_reg_1456);

assign add_ln36_21_fu_1024_p2 = ($signed(zext_ln28_reg_1319) + $signed(7'd70));

assign add_ln36_22_fu_1090_p2 = (add_ln36_20_fu_1086_p2 + mul_ln36_7_reg_1461);

assign add_ln36_23_fu_1105_p2 = (add_ln36_22_reg_1471 + mul_ln36_8_reg_1477);

assign add_ln36_24_fu_1057_p2 = ($signed(zext_ln28_reg_1319) + $signed(7'd90));

assign add_ln36_25_fu_1110_p2 = (add_ln36_23_fu_1105_p2 + mul_ln36_9_reg_1482);

assign add_ln36_2_fu_809_p2 = (add_ln36_reg_1198 + 7'd2);

assign add_ln36_3_fu_819_p2 = (add_ln36_reg_1198 + 7'd3);

assign add_ln36_4_fu_829_p2 = (add_ln36_reg_1198 + 7'd4);

assign add_ln36_5_fu_839_p2 = (add_ln36_reg_1198 + 7'd5);

assign add_ln36_6_fu_849_p2 = (add_ln36_reg_1198 + 7'd6);

assign add_ln36_7_fu_859_p2 = (add_ln36_reg_1198 + 7'd7);

assign add_ln36_8_fu_869_p2 = (add_ln36_reg_1198 + 7'd8);

assign add_ln36_9_fu_879_p2 = (add_ln36_reg_1198 + 7'd9);

assign add_ln36_fu_787_p2 = (zext_ln36_20_fu_783_p1 + shl_ln1_fu_767_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b1 == ap_block_state26_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b1 == ap_block_state26_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (n_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state10 = ((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state11 = ((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state13 = ((c_V_1_state == 2'd1) | ((c_V_1_state == 2'd3) & (c_V_TREADY == 1'b0)));
end

assign ap_block_state19_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = (((ap_predicate_op70_read_state2 == 1'b1) & (b_V_0_vld_out == 1'b0)) | ((ap_predicate_op66_read_state2 == 1'b1) & (1'b0 == a_V_0_vld_out)));
end

assign ap_block_state20_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_io = ((ap_predicate_op317_write_state26 == 1'b1) & (c_V_1_ack_in == 1'b0));
end

assign ap_block_state26_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_io = ((ap_predicate_op318_write_state27 == 1'b1) & (c_V_1_ack_in == 1'b0));
end

assign ap_block_state27_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3 = ((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((1'b0 == a_V_0_vld_out) | (b_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_condition_1544 = ((icmp_ln20_8_reg_1155 == 1'd0) & (icmp_ln20_7_reg_1151 == 1'd0) & (icmp_ln20_6_reg_1147 == 1'd0) & (icmp_ln20_5_reg_1143 == 1'd0) & (icmp_ln20_4_reg_1139 == 1'd0) & (icmp_ln20_3_reg_1135 == 1'd0) & (icmp_ln20_2_reg_1131 == 1'd0) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338_pp0_iter1_reg == 1'd0) & (icmp_ln28_reg_1310_pp0_iter1_reg == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_1548 = ((icmp_ln20_reg_1123 == 1'd1) & (icmp_ln30_fu_917_p2 == 1'd0) & (icmp_ln28_fu_889_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_1555 = ((icmp_ln20_1_reg_1127 == 1'd1) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_condition_1559 = ((icmp_ln20_2_reg_1131 == 1'd1) & (icmp_ln20_1_reg_1127 == 1'd0) & (icmp_ln30_reg_1338 == 1'd0) & (icmp_ln28_reg_1310 == 1'd0) & (icmp_ln20_reg_1123 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op317_write_state26 = ((icmp_ln30_reg_1338_pp0_iter1_reg == 1'd0) & (icmp_ln28_reg_1310_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op318_write_state27 = ((icmp_ln30_reg_1338_pp0_iter1_reg == 1'd0) & (icmp_ln28_reg_1310_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op66_read_state2 = ((icmp_ln20_reg_1123 == 1'd0) & (icmp_ln17_fu_610_p2 == 1'd0) & (icmp_ln16_fu_598_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op70_read_state2 = ((icmp_ln20_reg_1123 == 1'd0) & (icmp_ln17_fu_610_p2 == 1'd0) & (icmp_ln16_fu_598_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran19to28_state19 = ((icmp_ln30_fu_917_p2 == 1'd1) | (icmp_ln28_fu_889_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_V_0_ack_in = b_V_0_state[1'd1];

assign b_V_0_load_A = (~b_V_0_sel_wr & b_V_0_state_cmp_full);

assign b_V_0_load_B = (b_V_0_state_cmp_full & b_V_0_sel_wr);

assign b_V_0_sel = b_V_0_sel_rd;

assign b_V_0_state_cmp_full = ((b_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign b_V_0_vld_in = b_V_TVALID;

assign b_V_0_vld_out = b_V_0_state[1'd0];

assign b_V_TREADY = b_V_0_state[1'd1];

assign c_V_1_ack_in = c_V_1_state[1'd1];

assign c_V_1_ack_out = c_V_TREADY;

assign c_V_1_load_A = (~c_V_1_sel_wr & c_V_1_state_cmp_full);

assign c_V_1_load_B = (c_V_1_state_cmp_full & c_V_1_sel_wr);

assign c_V_1_sel = c_V_1_sel_rd;

assign c_V_1_state_cmp_full = ((c_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign c_V_1_vld_out = c_V_1_state[1'd0];

assign c_V_TDATA = c_V_1_data_out;

assign c_V_TVALID = c_V_1_state[1'd0];

assign i_1_fu_604_p2 = (i_0_reg_459 + 4'd1);

assign i_fu_752_p2 = (i1_0_reg_470 + 4'd1);

assign icmp_ln16_fu_598_p2 = ((i_0_reg_459 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_610_p2 = ((zext_ln16_fu_594_p1 == n_read_reg_1116) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_540_p2 = ((n_0_data_out == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln20_2_fu_546_p2 = ((n_0_data_out == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_3_fu_552_p2 = ((n_0_data_out == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln20_4_fu_558_p2 = ((n_0_data_out == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln20_5_fu_564_p2 = ((n_0_data_out == 32'd5) ? 1'b1 : 1'b0);

assign icmp_ln20_6_fu_570_p2 = ((n_0_data_out == 32'd6) ? 1'b1 : 1'b0);

assign icmp_ln20_7_fu_576_p2 = ((n_0_data_out == 32'd7) ? 1'b1 : 1'b0);

assign icmp_ln20_8_fu_582_p2 = ((n_0_data_out == 32'd8) ? 1'b1 : 1'b0);

assign icmp_ln20_9_fu_588_p2 = ((n_0_data_out == 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_534_p2 = ((n_0_data_out == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_746_p2 = ((i1_0_reg_470 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_762_p2 = ((zext_ln26_fu_758_p1 == n_read_reg_1116) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_889_p2 = ((ap_phi_mux_j2_0_phi_fu_485_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_917_p2 = ((zext_ln28_3_fu_913_p1 == n_read_reg_1116) ? 1'b1 : 1'b0);

assign j_fu_895_p2 = (ap_phi_mux_j2_0_phi_fu_485_p4 + 4'd1);

assign mul_ln36_1_fu_971_p2 = ($signed(a_cache_load_1_reg_1225) * $signed(reg_529));

assign mul_ln36_2_fu_1004_p2 = ($signed(a_cache_load_2_reg_1240) * $signed(reg_524));

assign mul_ln36_3_fu_1009_p2 = ($signed(a_cache_load_3_reg_1245) * $signed(reg_529));

assign mul_ln36_4_fu_1043_p2 = ($signed(a_cache_load_4_reg_1260) * $signed(reg_524));

assign mul_ln36_5_fu_1048_p2 = ($signed(a_cache_load_5_reg_1265) * $signed(reg_529));

assign mul_ln36_6_fu_1076_p2 = ($signed(a_cache_load_6_reg_1280) * $signed(reg_524));

assign mul_ln36_7_fu_1081_p2 = ($signed(a_cache_load_7_reg_1285) * $signed(reg_529));

assign mul_ln36_8_fu_1095_p2 = ($signed(a_cache_load_8_reg_1300) * $signed(reg_524));

assign mul_ln36_9_fu_1100_p2 = ($signed(a_cache_load_9_reg_1305) * $signed(reg_529));

assign mul_ln36_fu_966_p2 = ($signed(a_cache_load_reg_1220) * $signed(reg_524));

assign n_0_ack_in = n_0_state[1'd1];

assign n_0_load_A = (n_0_state_cmp_full & ~n_0_sel_wr);

assign n_0_load_B = (n_0_state_cmp_full & n_0_sel_wr);

assign n_0_sel = n_0_sel_rd;

assign n_0_state_cmp_full = ((n_0_state != 2'd1) ? 1'b1 : 1'b0);

assign n_0_vld_in = n_TVALID;

assign n_0_vld_out = n_0_state[1'd0];

assign n_TREADY = n_0_state[1'd1];

assign or_ln21_fu_647_p2 = (7'd1 | add_ln21_reg_1174);

assign or_ln36_1_fu_938_p3 = {{3'd5}, {ap_phi_mux_j2_0_phi_fu_485_p4}};

assign or_ln36_fu_798_p2 = (7'd1 | add_ln36_fu_787_p2);

assign sext_ln36_fu_991_p1 = $signed(add_ln36_17_fu_986_p2);

assign shl_ln1_fu_767_p3 = {{i1_0_reg_470}, {3'd0}};

assign shl_ln21_1_fu_623_p3 = {{i_0_reg_459}, {1'd0}};

assign shl_ln36_1_fu_775_p3 = {{i1_0_reg_470}, {1'd0}};

assign shl_ln_fu_615_p3 = {{i_0_reg_459}, {3'd0}};

assign zext_ln16_fu_594_p1 = i_0_reg_459;

assign zext_ln21_10_fu_631_p1 = shl_ln21_1_fu_623_p3;

assign zext_ln21_1_fu_652_p1 = or_ln21_fu_647_p2;

assign zext_ln21_2_fu_663_p1 = add_ln21_1_fu_658_p2;

assign zext_ln21_3_fu_674_p1 = add_ln21_2_fu_669_p2;

assign zext_ln21_4_fu_685_p1 = add_ln21_3_fu_680_p2;

assign zext_ln21_5_fu_696_p1 = add_ln21_4_fu_691_p2;

assign zext_ln21_6_fu_707_p1 = add_ln21_5_fu_702_p2;

assign zext_ln21_7_fu_718_p1 = add_ln21_6_fu_713_p2;

assign zext_ln21_8_fu_729_p1 = add_ln21_7_fu_724_p2;

assign zext_ln21_9_fu_740_p1 = add_ln21_8_fu_735_p2;

assign zext_ln21_fu_641_p1 = add_ln21_fu_635_p2;

assign zext_ln26_fu_758_p1 = i1_0_reg_470;

assign zext_ln28_1_fu_905_p1 = ap_phi_mux_j2_0_phi_fu_485_p4;

assign zext_ln28_2_fu_909_p1 = ap_phi_mux_j2_0_phi_fu_485_p4;

assign zext_ln28_3_fu_913_p1 = ap_phi_mux_j2_0_phi_fu_485_p4;

assign zext_ln28_fu_901_p1 = ap_phi_mux_j2_0_phi_fu_485_p4;

assign zext_ln36_10_fu_804_p1 = or_ln36_fu_798_p2;

assign zext_ln36_11_fu_933_p1 = add_ln36_1_fu_927_p2;

assign zext_ln36_12_fu_951_p1 = add_ln36_11_fu_946_p2;

assign zext_ln36_13_fu_961_p1 = add_ln36_13_fu_956_p2;

assign zext_ln36_14_fu_981_p1 = add_ln36_15_fu_976_p2;

assign zext_ln36_15_fu_995_p1 = $unsigned(sext_ln36_fu_991_p1);

assign zext_ln36_16_fu_1019_p1 = add_ln36_19_fu_1014_p2;

assign zext_ln36_17_fu_1029_p1 = add_ln36_21_fu_1024_p2;

assign zext_ln36_18_fu_1053_p1 = or_ln36_1_reg_1352;

assign zext_ln36_19_fu_1062_p1 = add_ln36_24_fu_1057_p2;

assign zext_ln36_1_fu_922_p1 = ap_phi_mux_j2_0_phi_fu_485_p4;

assign zext_ln36_20_fu_783_p1 = shl_ln36_1_fu_775_p3;

assign zext_ln36_2_fu_814_p1 = add_ln36_2_fu_809_p2;

assign zext_ln36_3_fu_824_p1 = add_ln36_3_fu_819_p2;

assign zext_ln36_4_fu_834_p1 = add_ln36_4_fu_829_p2;

assign zext_ln36_5_fu_844_p1 = add_ln36_5_fu_839_p2;

assign zext_ln36_6_fu_854_p1 = add_ln36_6_fu_849_p2;

assign zext_ln36_7_fu_864_p1 = add_ln36_7_fu_859_p2;

assign zext_ln36_8_fu_874_p1 = add_ln36_8_fu_869_p2;

assign zext_ln36_9_fu_884_p1 = add_ln36_9_fu_879_p2;

assign zext_ln36_fu_793_p1 = add_ln36_fu_787_p2;

always @ (posedge ap_clk) begin
    add_ln21_reg_1174[0] <= 1'b0;
    add_ln36_reg_1198[0] <= 1'b0;
    zext_ln28_reg_1319[6:4] <= 3'b000;
    zext_ln28_1_reg_1326[5:4] <= 2'b00;
    zext_ln28_2_reg_1332[4] <= 1'b0;
    or_ln36_1_reg_1352[6:4] <= 3'b101;
end

endmodule //mul
