// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mul,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=139,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=3,HLS_SYN_FF=868,HLS_SYN_LUT=1396,HLS_VERSION=2019_1}" *)

module mul (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_pp0_stage0 = 13'd4;
parameter    ap_ST_fsm_pp0_stage1 = 13'd8;
parameter    ap_ST_fsm_pp0_stage2 = 13'd16;
parameter    ap_ST_fsm_pp0_stage3 = 13'd32;
parameter    ap_ST_fsm_pp0_stage4 = 13'd64;
parameter    ap_ST_fsm_pp0_stage5 = 13'd128;
parameter    ap_ST_fsm_pp0_stage6 = 13'd256;
parameter    ap_ST_fsm_pp0_stage7 = 13'd512;
parameter    ap_ST_fsm_pp0_stage8 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage9 = 13'd2048;
parameter    ap_ST_fsm_state16 = 13'd4096;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] a_address0;
reg    a_ce0;
wire   [31:0] a_q0;
reg   [6:0] b_address0;
reg    b_ce0;
wire   [31:0] b_q0;
wire   [6:0] c_address0;
reg    c_ce0;
reg    c_we0;
wire   [7:0] n;
reg   [3:0] j_0_reg_324;
reg  signed [31:0] reg_366;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln56_reg_923;
reg   [0:0] icmp_ln58_reg_932;
reg   [0:0] icmp_ln61_reg_815;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state15_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln61_1_reg_819;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [0:0] icmp_ln61_2_reg_823;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [0:0] icmp_ln61_3_reg_827;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [0:0] icmp_ln61_4_reg_831;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state9_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg   [0:0] icmp_ln61_5_reg_835;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state10_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
reg   [0:0] icmp_ln61_6_reg_839;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state11_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
reg   [0:0] icmp_ln61_7_reg_843;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state12_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
reg   [0:0] icmp_ln61_8_reg_847;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln61_9_reg_851;
reg  signed [31:0] reg_370;
wire   [31:0] grp_fu_374_p2;
reg   [31:0] reg_380;
reg   [0:0] icmp_ln56_reg_923_pp0_iter1_reg;
reg   [0:0] icmp_ln58_reg_932_pp0_iter1_reg;
reg   [7:0] n_read_reg_805;
wire   [0:0] or_ln53_fu_396_p2;
reg   [0:0] or_ln53_reg_811;
wire   [0:0] icmp_ln61_fu_402_p2;
wire   [0:0] icmp_ln61_1_fu_408_p2;
wire   [0:0] icmp_ln61_2_fu_414_p2;
wire   [0:0] icmp_ln61_3_fu_420_p2;
wire   [0:0] icmp_ln61_4_fu_426_p2;
wire   [0:0] icmp_ln61_5_fu_432_p2;
wire   [0:0] icmp_ln61_6_fu_438_p2;
wire   [0:0] icmp_ln61_7_fu_444_p2;
wire   [0:0] icmp_ln61_8_fu_450_p2;
wire   [0:0] icmp_ln61_9_fu_456_p2;
wire   [0:0] icmp_ln54_fu_462_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] i_fu_468_p2;
reg   [3:0] i_reg_859;
wire   [0:0] icmp_ln55_fu_478_p2;
wire   [6:0] add_ln62_fu_503_p2;
reg   [6:0] add_ln62_reg_868;
reg   [6:0] a_addr_reg_873;
reg   [6:0] a_addr_1_reg_878;
reg   [6:0] a_addr_2_reg_883;
reg   [6:0] a_addr_3_reg_888;
reg   [6:0] a_addr_4_reg_893;
reg   [6:0] a_addr_5_reg_898;
reg   [6:0] a_addr_6_reg_903;
reg   [6:0] a_addr_7_reg_908;
reg   [6:0] a_addr_8_reg_913;
reg   [6:0] a_addr_9_reg_918;
wire   [0:0] icmp_ln56_fu_613_p2;
wire   [3:0] j_fu_619_p2;
reg   [3:0] j_reg_927;
wire   [0:0] icmp_ln58_fu_629_p2;
wire   [4:0] zext_ln61_2_fu_639_p1;
reg   [4:0] zext_ln61_2_reg_941;
reg   [31:0] mul_ln62_reg_952;
wire   [5:0] zext_ln61_1_fu_664_p1;
reg   [5:0] zext_ln61_1_reg_963;
wire   [31:0] add_ln62_10_fu_679_p2;
reg   [31:0] add_ln62_10_reg_973;
wire   [31:0] add_ln62_12_fu_694_p2;
reg   [31:0] add_ln62_12_reg_984;
wire   [6:0] zext_ln61_fu_713_p1;
reg   [6:0] zext_ln61_reg_995;
wire   [31:0] add_ln62_14_fu_717_p2;
reg   [31:0] add_ln62_14_reg_1002;
wire   [6:0] or_ln62_1_fu_733_p3;
reg   [6:0] or_ln62_1_reg_1013;
wire   [31:0] add_ln62_16_fu_741_p2;
reg   [31:0] add_ln62_16_reg_1018;
wire   [31:0] add_ln62_18_fu_756_p2;
reg   [31:0] add_ln62_18_reg_1029;
wire   [31:0] add_ln62_20_fu_765_p2;
reg   [31:0] add_ln62_20_reg_1040;
wire   [31:0] add_ln62_22_fu_780_p2;
reg   [31:0] add_ln62_22_reg_1051;
wire   [31:0] add_ln62_23_fu_785_p2;
reg   [31:0] add_ln62_23_reg_1057;
wire    ap_block_pp0_stage0_subdone;
reg    ap_predicate_tran3to16_state3;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [3:0] i_0_reg_313;
wire    ap_CS_fsm_state16;
reg   [3:0] ap_phi_mux_j_0_phi_fu_328_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_tmp_0_lcssa_phi_fu_340_p22;
reg   [31:0] ap_phi_reg_pp0_iter0_tmp_0_lcssa_reg_336;
reg   [31:0] ap_phi_reg_pp0_iter1_tmp_0_lcssa_reg_336;
wire   [31:0] add_ln62_25_fu_790_p2;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln62_1_fu_509_p1;
wire   [63:0] zext_ln62_2_fu_520_p1;
wire   [63:0] zext_ln62_4_fu_531_p1;
wire   [63:0] zext_ln62_6_fu_542_p1;
wire   [63:0] zext_ln62_8_fu_553_p1;
wire   [63:0] zext_ln62_10_fu_564_p1;
wire   [63:0] zext_ln62_12_fu_575_p1;
wire   [63:0] zext_ln62_14_fu_586_p1;
wire   [63:0] zext_ln62_16_fu_597_p1;
wire   [63:0] zext_ln62_18_fu_608_p1;
wire   [63:0] zext_ln62_3_fu_634_p1;
wire   [63:0] zext_ln62_5_fu_649_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln62_7_fu_659_p1;
wire   [63:0] zext_ln62_9_fu_674_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln62_11_fu_689_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln62_13_fu_708_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln62_15_fu_728_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln62_17_fu_751_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln62_19_fu_761_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] zext_ln62_20_fu_775_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] zext_ln65_fu_800_p1;
wire   [0:0] icmp_ln53_fu_384_p2;
wire   [0:0] icmp_ln53_1_fu_390_p2;
wire   [7:0] zext_ln54_fu_474_p1;
wire   [4:0] shl_ln62_1_fu_491_p3;
wire   [6:0] zext_ln62_fu_499_p1;
wire   [6:0] shl_ln_fu_483_p3;
wire   [6:0] or_ln62_fu_514_p2;
wire   [6:0] add_ln62_2_fu_525_p2;
wire   [6:0] add_ln62_3_fu_536_p2;
wire   [6:0] add_ln62_4_fu_547_p2;
wire   [6:0] add_ln62_5_fu_558_p2;
wire   [6:0] add_ln62_6_fu_569_p2;
wire   [6:0] add_ln62_7_fu_580_p2;
wire   [6:0] add_ln62_8_fu_591_p2;
wire   [6:0] add_ln62_9_fu_602_p2;
wire   [7:0] zext_ln56_fu_625_p1;
wire   [4:0] add_ln62_1_fu_643_p2;
wire   [4:0] add_ln62_11_fu_654_p2;
wire   [5:0] add_ln62_13_fu_668_p2;
wire   [5:0] add_ln62_15_fu_684_p2;
wire   [4:0] add_ln62_17_fu_699_p2;
wire  signed [5:0] sext_ln62_fu_704_p1;
wire   [6:0] add_ln62_19_fu_722_p2;
wire   [6:0] add_ln62_21_fu_746_p2;
wire   [6:0] add_ln62_24_fu_770_p2;
wire   [6:0] add_ln65_fu_796_p2;
reg   [12:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1002;
reg    ap_condition_1007;
reg    ap_condition_1011;
reg    ap_condition_1015;
reg    ap_condition_1019;
reg    ap_condition_1023;
reg    ap_condition_1027;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

mul_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
mul_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a_address0(a_address0),
    .a_ce0(a_ce0),
    .a_q0(a_q0),
    .b_address0(b_address0),
    .b_ce0(b_ce0),
    .b_q0(b_q0),
    .c_address0(c_address0),
    .c_ce0(c_ce0),
    .c_we0(c_we0),
    .c_d0(ap_phi_mux_tmp_0_lcssa_phi_fu_340_p22),
    .n(n)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln55_fu_478_p2 == 1'd0) & (icmp_ln54_fu_462_p2 == 1'd0) & (or_ln53_reg_811 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln55_fu_478_p2 == 1'd0) & (icmp_ln54_fu_462_p2 == 1'd0) & (or_ln53_reg_811 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1027)) begin
            ap_phi_reg_pp0_iter0_tmp_0_lcssa_reg_336 <= add_ln62_18_fu_756_p2;
        end else if ((1'b1 == ap_condition_1023)) begin
            ap_phi_reg_pp0_iter0_tmp_0_lcssa_reg_336 <= add_ln62_16_fu_741_p2;
        end else if ((1'b1 == ap_condition_1019)) begin
            ap_phi_reg_pp0_iter0_tmp_0_lcssa_reg_336 <= add_ln62_14_fu_717_p2;
        end else if ((1'b1 == ap_condition_1015)) begin
            ap_phi_reg_pp0_iter0_tmp_0_lcssa_reg_336 <= add_ln62_12_fu_694_p2;
        end else if ((1'b1 == ap_condition_1011)) begin
            ap_phi_reg_pp0_iter0_tmp_0_lcssa_reg_336 <= add_ln62_10_fu_679_p2;
        end else if ((1'b1 == ap_condition_1007)) begin
            ap_phi_reg_pp0_iter0_tmp_0_lcssa_reg_336 <= mul_ln62_reg_952;
        end else if ((1'b1 == ap_condition_1002)) begin
            ap_phi_reg_pp0_iter0_tmp_0_lcssa_reg_336 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_9_reg_851 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln58_reg_932_pp0_iter1_reg == 1'd0) & (icmp_ln56_reg_923_pp0_iter1_reg == 1'd0) & (icmp_ln61_8_reg_847 == 1'd0) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_tmp_0_lcssa_reg_336 <= add_ln62_23_fu_785_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln61_8_reg_847 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_tmp_0_lcssa_reg_336 <= add_ln62_22_fu_780_p2;
    end else if (((1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln61_7_reg_843 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_tmp_0_lcssa_reg_336 <= add_ln62_20_fu_765_p2;
    end else if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        ap_phi_reg_pp0_iter1_tmp_0_lcssa_reg_336 <= ap_phi_reg_pp0_iter0_tmp_0_lcssa_reg_336;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (or_ln53_fu_396_p2 == 1'd0))) begin
        i_0_reg_313 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_0_reg_313 <= i_reg_859;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln55_fu_478_p2 == 1'd0) & (icmp_ln54_fu_462_p2 == 1'd0) & (or_ln53_reg_811 == 1'd0))) begin
        j_0_reg_324 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        j_0_reg_324 <= j_reg_927;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln55_fu_478_p2 == 1'd0) & (icmp_ln54_fu_462_p2 == 1'd0) & (or_ln53_reg_811 == 1'd0))) begin
        a_addr_1_reg_878[6 : 1] <= zext_ln62_2_fu_520_p1[6 : 1];
        a_addr_2_reg_883[6 : 1] <= zext_ln62_4_fu_531_p1[6 : 1];
        a_addr_3_reg_888[6 : 1] <= zext_ln62_6_fu_542_p1[6 : 1];
        a_addr_4_reg_893[6 : 1] <= zext_ln62_8_fu_553_p1[6 : 1];
        a_addr_5_reg_898[6 : 1] <= zext_ln62_10_fu_564_p1[6 : 1];
        a_addr_6_reg_903[6 : 1] <= zext_ln62_12_fu_575_p1[6 : 1];
        a_addr_7_reg_908[6 : 1] <= zext_ln62_14_fu_586_p1[6 : 1];
        a_addr_8_reg_913[6 : 1] <= zext_ln62_16_fu_597_p1[6 : 1];
        a_addr_9_reg_918[6 : 1] <= zext_ln62_18_fu_608_p1[6 : 1];
        a_addr_reg_873[6 : 1] <= zext_ln62_1_fu_509_p1[6 : 1];
        add_ln62_reg_868[6 : 1] <= add_ln62_fu_503_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        add_ln62_10_reg_973 <= add_ln62_10_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        add_ln62_12_reg_984 <= add_ln62_12_fu_694_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        add_ln62_14_reg_1002 <= add_ln62_14_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        add_ln62_16_reg_1018 <= add_ln62_16_fu_741_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        add_ln62_18_reg_1029 <= add_ln62_18_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        add_ln62_20_reg_1040 <= add_ln62_20_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        add_ln62_22_reg_1051 <= add_ln62_22_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln58_reg_932_pp0_iter1_reg == 1'd0) & (icmp_ln56_reg_923_pp0_iter1_reg == 1'd0) & (icmp_ln61_8_reg_847 == 1'd0) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln62_23_reg_1057 <= add_ln62_23_fu_785_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (or_ln53_reg_811 == 1'd0))) begin
        i_reg_859 <= i_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln56_reg_923 <= icmp_ln56_fu_613_p2;
        icmp_ln56_reg_923_pp0_iter1_reg <= icmp_ln56_reg_923;
        icmp_ln58_reg_932_pp0_iter1_reg <= icmp_ln58_reg_932;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln56_fu_613_p2 == 1'd0))) begin
        icmp_ln58_reg_932 <= icmp_ln58_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (or_ln53_fu_396_p2 == 1'd0))) begin
        icmp_ln61_1_reg_819 <= icmp_ln61_1_fu_408_p2;
        icmp_ln61_2_reg_823 <= icmp_ln61_2_fu_414_p2;
        icmp_ln61_3_reg_827 <= icmp_ln61_3_fu_420_p2;
        icmp_ln61_4_reg_831 <= icmp_ln61_4_fu_426_p2;
        icmp_ln61_5_reg_835 <= icmp_ln61_5_fu_432_p2;
        icmp_ln61_6_reg_839 <= icmp_ln61_6_fu_438_p2;
        icmp_ln61_7_reg_843 <= icmp_ln61_7_fu_444_p2;
        icmp_ln61_8_reg_847 <= icmp_ln61_8_fu_450_p2;
        icmp_ln61_9_reg_851 <= icmp_ln61_9_fu_456_p2;
        icmp_ln61_reg_815 <= icmp_ln61_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_927 <= j_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        mul_ln62_reg_952 <= grp_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_read_reg_805 <= n;
        or_ln53_reg_811 <= or_ln53_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln61_8_reg_847 == 1'd0) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        or_ln62_1_reg_1013[3 : 0] <= or_ln62_1_fu_733_p3[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln61_8_reg_847 == 1'd0) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_9_reg_851 == 1'd0) & (icmp_ln61_8_reg_847 == 1'd0) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)))) begin
        reg_366 <= a_q0;
        reg_370 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln58_reg_932_pp0_iter1_reg == 1'd0) & (icmp_ln56_reg_923_pp0_iter1_reg == 1'd0) & (icmp_ln61_9_reg_851 == 1'd0) & (icmp_ln61_8_reg_847 == 1'd0) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_8_reg_847 == 1'd0) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0)))) begin
        reg_380 <= grp_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        zext_ln61_1_reg_963[3 : 0] <= zext_ln61_1_fu_664_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        zext_ln61_2_reg_941[3 : 0] <= zext_ln61_2_fu_639_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        zext_ln61_reg_995[3 : 0] <= zext_ln61_fu_713_p1[3 : 0];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            a_address0 = a_addr_9_reg_918;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            a_address0 = a_addr_8_reg_913;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            a_address0 = a_addr_7_reg_908;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            a_address0 = a_addr_6_reg_903;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            a_address0 = a_addr_5_reg_898;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            a_address0 = a_addr_4_reg_893;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            a_address0 = a_addr_3_reg_888;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            a_address0 = a_addr_2_reg_883;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_address0 = a_addr_1_reg_878;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_address0 = a_addr_reg_873;
        end else begin
            a_address0 = 'bx;
        end
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_predicate_tran3to16_state3 == 1'b1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((or_ln53_reg_811 == 1'd1) | ((icmp_ln55_fu_478_p2 == 1'd1) | (icmp_ln54_fu_462_p2 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0))) begin
        ap_phi_mux_j_0_phi_fu_328_p4 = j_reg_927;
    end else begin
        ap_phi_mux_j_0_phi_fu_328_p4 = j_0_reg_324;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln58_reg_932_pp0_iter1_reg == 1'd0) & (icmp_ln56_reg_923_pp0_iter1_reg == 1'd0) & (icmp_ln61_9_reg_851 == 1'd0) & (icmp_ln61_8_reg_847 == 1'd0) & (icmp_ln61_7_reg_843 == 1'd0) & (icmp_ln61_6_reg_839 == 1'd0) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0))) begin
        ap_phi_mux_tmp_0_lcssa_phi_fu_340_p22 = add_ln62_25_fu_790_p2;
    end else begin
        ap_phi_mux_tmp_0_lcssa_phi_fu_340_p22 = ap_phi_reg_pp0_iter1_tmp_0_lcssa_reg_336;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((or_ln53_reg_811 == 1'd1) | ((icmp_ln55_fu_478_p2 == 1'd1) | (icmp_ln54_fu_462_p2 == 1'd1))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            b_address0 = zext_ln62_20_fu_775_p1;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            b_address0 = zext_ln62_19_fu_761_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            b_address0 = zext_ln62_17_fu_751_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            b_address0 = zext_ln62_15_fu_728_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            b_address0 = zext_ln62_13_fu_708_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            b_address0 = zext_ln62_11_fu_689_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            b_address0 = zext_ln62_9_fu_674_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            b_address0 = zext_ln62_7_fu_659_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_address0 = zext_ln62_5_fu_649_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_address0 = zext_ln62_3_fu_634_p1;
        end else begin
            b_address0 = 'bx;
        end
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln58_reg_932_pp0_iter1_reg == 1'd0) & (icmp_ln56_reg_923_pp0_iter1_reg == 1'd0))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((or_ln53_reg_811 == 1'd1) | ((icmp_ln55_fu_478_p2 == 1'd1) | (icmp_ln54_fu_462_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_predicate_tran3to16_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_predicate_tran3to16_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln62_10_fu_679_p2 = (mul_ln62_reg_952 + reg_380);

assign add_ln62_11_fu_654_p2 = ($signed(zext_ln61_2_reg_941) + $signed(5'd20));

assign add_ln62_12_fu_694_p2 = (add_ln62_10_reg_973 + reg_380);

assign add_ln62_13_fu_668_p2 = (zext_ln61_1_fu_664_p1 + 6'd30);

assign add_ln62_14_fu_717_p2 = (add_ln62_12_reg_984 + reg_380);

assign add_ln62_15_fu_684_p2 = ($signed(zext_ln61_1_reg_963) + $signed(6'd40));

assign add_ln62_16_fu_741_p2 = (add_ln62_14_reg_1002 + reg_380);

assign add_ln62_17_fu_699_p2 = ($signed(zext_ln61_2_reg_941) + $signed(5'd18));

assign add_ln62_18_fu_756_p2 = (add_ln62_16_reg_1018 + reg_380);

assign add_ln62_19_fu_722_p2 = (zext_ln61_fu_713_p1 + 7'd60);

assign add_ln62_1_fu_643_p2 = (zext_ln61_2_fu_639_p1 + 5'd10);

assign add_ln62_20_fu_765_p2 = (add_ln62_18_reg_1029 + reg_380);

assign add_ln62_21_fu_746_p2 = ($signed(zext_ln61_reg_995) + $signed(7'd70));

assign add_ln62_22_fu_780_p2 = (add_ln62_20_reg_1040 + reg_380);

assign add_ln62_23_fu_785_p2 = (add_ln62_22_reg_1051 + reg_380);

assign add_ln62_24_fu_770_p2 = ($signed(zext_ln61_reg_995) + $signed(7'd90));

assign add_ln62_25_fu_790_p2 = (add_ln62_23_reg_1057 + reg_380);

assign add_ln62_2_fu_525_p2 = (add_ln62_fu_503_p2 + 7'd2);

assign add_ln62_3_fu_536_p2 = (add_ln62_fu_503_p2 + 7'd3);

assign add_ln62_4_fu_547_p2 = (add_ln62_fu_503_p2 + 7'd4);

assign add_ln62_5_fu_558_p2 = (add_ln62_fu_503_p2 + 7'd5);

assign add_ln62_6_fu_569_p2 = (add_ln62_fu_503_p2 + 7'd6);

assign add_ln62_7_fu_580_p2 = (add_ln62_fu_503_p2 + 7'd7);

assign add_ln62_8_fu_591_p2 = (add_ln62_fu_503_p2 + 7'd8);

assign add_ln62_9_fu_602_p2 = (add_ln62_fu_503_p2 + 7'd9);

assign add_ln62_fu_503_p2 = (zext_ln62_fu_499_p1 + shl_ln_fu_483_p3);

assign add_ln65_fu_796_p2 = (add_ln62_reg_868 + zext_ln61_reg_995);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1002 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_reg_815 == 1'd1) & (icmp_ln58_fu_629_p2 == 1'd0) & (icmp_ln56_fu_613_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_1007 = ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln61_1_reg_819 == 1'd1) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0));
end

always @ (*) begin
    ap_condition_1011 = ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln61_2_reg_823 == 1'd1) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0));
end

always @ (*) begin
    ap_condition_1015 = ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln61_3_reg_827 == 1'd1) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0));
end

always @ (*) begin
    ap_condition_1019 = ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln61_4_reg_831 == 1'd1) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0));
end

always @ (*) begin
    ap_condition_1023 = ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln61_5_reg_835 == 1'd1) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0));
end

always @ (*) begin
    ap_condition_1027 = ((1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln61_6_reg_839 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln61_5_reg_835 == 1'd0) & (icmp_ln61_4_reg_831 == 1'd0) & (icmp_ln61_3_reg_827 == 1'd0) & (icmp_ln61_2_reg_823 == 1'd0) & (icmp_ln61_1_reg_819 == 1'd0) & (icmp_ln61_reg_815 == 1'd0) & (icmp_ln58_reg_932 == 1'd0) & (icmp_ln56_reg_923 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran3to16_state3 = ((icmp_ln58_fu_629_p2 == 1'd1) | (icmp_ln56_fu_613_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_address0 = zext_ln65_fu_800_p1;

assign grp_fu_374_p2 = ($signed(reg_366) * $signed(reg_370));

assign i_fu_468_p2 = (i_0_reg_313 + 4'd1);

assign icmp_ln53_1_fu_390_p2 = ((n > 8'd10) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_384_p2 = ((n < 8'd5) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_462_p2 = ((i_0_reg_313 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_478_p2 = ((zext_ln54_fu_474_p1 == n_read_reg_805) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_613_p2 = ((ap_phi_mux_j_0_phi_fu_328_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_629_p2 = ((zext_ln56_fu_625_p1 == n_read_reg_805) ? 1'b1 : 1'b0);

assign icmp_ln61_1_fu_408_p2 = ((n == 8'd1) ? 1'b1 : 1'b0);

assign icmp_ln61_2_fu_414_p2 = ((n == 8'd2) ? 1'b1 : 1'b0);

assign icmp_ln61_3_fu_420_p2 = ((n == 8'd3) ? 1'b1 : 1'b0);

assign icmp_ln61_4_fu_426_p2 = ((n == 8'd4) ? 1'b1 : 1'b0);

assign icmp_ln61_5_fu_432_p2 = ((n == 8'd5) ? 1'b1 : 1'b0);

assign icmp_ln61_6_fu_438_p2 = ((n == 8'd6) ? 1'b1 : 1'b0);

assign icmp_ln61_7_fu_444_p2 = ((n == 8'd7) ? 1'b1 : 1'b0);

assign icmp_ln61_8_fu_450_p2 = ((n == 8'd8) ? 1'b1 : 1'b0);

assign icmp_ln61_9_fu_456_p2 = ((n == 8'd9) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_402_p2 = ((n == 8'd0) ? 1'b1 : 1'b0);

assign j_fu_619_p2 = (ap_phi_mux_j_0_phi_fu_328_p4 + 4'd1);

assign or_ln53_fu_396_p2 = (icmp_ln53_fu_384_p2 | icmp_ln53_1_fu_390_p2);

assign or_ln62_1_fu_733_p3 = {{3'd5}, {j_0_reg_324}};

assign or_ln62_fu_514_p2 = (7'd1 | add_ln62_fu_503_p2);

assign sext_ln62_fu_704_p1 = $signed(add_ln62_17_fu_699_p2);

assign shl_ln62_1_fu_491_p3 = {{i_0_reg_313}, {1'd0}};

assign shl_ln_fu_483_p3 = {{i_0_reg_313}, {3'd0}};

assign zext_ln54_fu_474_p1 = i_0_reg_313;

assign zext_ln56_fu_625_p1 = ap_phi_mux_j_0_phi_fu_328_p4;

assign zext_ln61_1_fu_664_p1 = j_0_reg_324;

assign zext_ln61_2_fu_639_p1 = j_0_reg_324;

assign zext_ln61_fu_713_p1 = j_0_reg_324;

assign zext_ln62_10_fu_564_p1 = add_ln62_5_fu_558_p2;

assign zext_ln62_11_fu_689_p1 = add_ln62_15_fu_684_p2;

assign zext_ln62_12_fu_575_p1 = add_ln62_6_fu_569_p2;

assign zext_ln62_13_fu_708_p1 = $unsigned(sext_ln62_fu_704_p1);

assign zext_ln62_14_fu_586_p1 = add_ln62_7_fu_580_p2;

assign zext_ln62_15_fu_728_p1 = add_ln62_19_fu_722_p2;

assign zext_ln62_16_fu_597_p1 = add_ln62_8_fu_591_p2;

assign zext_ln62_17_fu_751_p1 = add_ln62_21_fu_746_p2;

assign zext_ln62_18_fu_608_p1 = add_ln62_9_fu_602_p2;

assign zext_ln62_19_fu_761_p1 = or_ln62_1_reg_1013;

assign zext_ln62_1_fu_509_p1 = add_ln62_fu_503_p2;

assign zext_ln62_20_fu_775_p1 = add_ln62_24_fu_770_p2;

assign zext_ln62_2_fu_520_p1 = or_ln62_fu_514_p2;

assign zext_ln62_3_fu_634_p1 = ap_phi_mux_j_0_phi_fu_328_p4;

assign zext_ln62_4_fu_531_p1 = add_ln62_2_fu_525_p2;

assign zext_ln62_5_fu_649_p1 = add_ln62_1_fu_643_p2;

assign zext_ln62_6_fu_542_p1 = add_ln62_3_fu_536_p2;

assign zext_ln62_7_fu_659_p1 = add_ln62_11_fu_654_p2;

assign zext_ln62_8_fu_553_p1 = add_ln62_4_fu_547_p2;

assign zext_ln62_9_fu_674_p1 = add_ln62_13_fu_668_p2;

assign zext_ln62_fu_499_p1 = shl_ln62_1_fu_491_p3;

assign zext_ln65_fu_800_p1 = add_ln65_fu_796_p2;

always @ (posedge ap_clk) begin
    add_ln62_reg_868[0] <= 1'b0;
    a_addr_reg_873[0] <= 1'b0;
    a_addr_1_reg_878[0] <= 1'b1;
    a_addr_2_reg_883[0] <= 1'b0;
    a_addr_3_reg_888[0] <= 1'b1;
    a_addr_4_reg_893[0] <= 1'b0;
    a_addr_5_reg_898[0] <= 1'b1;
    a_addr_6_reg_903[0] <= 1'b0;
    a_addr_7_reg_908[0] <= 1'b1;
    a_addr_8_reg_913[0] <= 1'b0;
    a_addr_9_reg_918[0] <= 1'b1;
    zext_ln61_2_reg_941[4] <= 1'b0;
    zext_ln61_1_reg_963[5:4] <= 2'b00;
    zext_ln61_reg_995[6:4] <= 3'b000;
    or_ln62_1_reg_1013[6:4] <= 3'b101;
end

endmodule //mul
