// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mul,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=4221,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=3,HLS_SYN_FF=457,HLS_SYN_LUT=544,HLS_VERSION=2019_1}" *)

module mul (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] a_address0;
reg    a_ce0;
wire   [31:0] a_q0;
wire   [6:0] b_address0;
reg    b_ce0;
wire   [31:0] b_q0;
wire   [6:0] c_address0;
reg    c_ce0;
reg    c_we0;
wire   [7:0] n;
wire   [3:0] i_fu_157_p2;
reg   [3:0] i_reg_292;
wire    ap_CS_fsm_state2;
wire   [6:0] add_ln58_2_fu_183_p2;
reg   [6:0] add_ln58_2_reg_297;
wire   [0:0] icmp_ln53_fu_151_p2;
wire   [3:0] j_fu_195_p2;
reg   [3:0] j_reg_306;
wire    ap_CS_fsm_state3;
wire   [6:0] zext_ln57_fu_201_p1;
reg   [6:0] zext_ln57_reg_311;
wire   [0:0] icmp_ln54_fu_189_p2;
wire   [4:0] zext_ln57_1_fu_205_p1;
reg   [4:0] zext_ln57_1_reg_316;
wire   [3:0] k_fu_215_p2;
reg   [3:0] k_reg_324;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln57_fu_209_p2;
reg  signed [31:0] a_load_reg_339;
wire    ap_CS_fsm_state5;
reg  signed [31:0] b_load_reg_344;
wire   [31:0] mul_ln58_fu_280_p2;
reg   [31:0] mul_ln58_reg_349;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_fu_284_p2;
wire    ap_CS_fsm_state7;
reg   [3:0] i_0_reg_105;
reg   [3:0] j_0_reg_116;
reg   [31:0] tmp_0_reg_127;
reg   [3:0] k_0_reg_140;
wire   [63:0] zext_ln58_2_fu_230_p1;
wire   [63:0] zext_ln58_4_fu_266_p1;
wire   [63:0] zext_ln61_fu_275_p1;
wire   [4:0] shl_ln58_1_fu_171_p3;
wire   [6:0] zext_ln58_fu_179_p1;
wire   [6:0] shl_ln_fu_163_p3;
wire   [6:0] zext_ln58_1_fu_221_p1;
wire   [6:0] add_ln58_fu_225_p2;
wire   [4:0] shl_ln58_3_fu_243_p3;
wire   [4:0] add_ln58_3_fu_251_p2;
wire   [6:0] shl_ln58_2_fu_235_p3;
wire   [6:0] zext_ln58_3_fu_256_p1;
wire   [6:0] add_ln58_1_fu_260_p2;
wire   [6:0] add_ln61_fu_271_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

mul_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
mul_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a_address0(a_address0),
    .a_ce0(a_ce0),
    .a_q0(a_q0),
    .b_address0(b_address0),
    .b_ce0(b_ce0),
    .b_q0(b_q0),
    .c_address0(c_address0),
    .c_ce0(c_ce0),
    .c_we0(c_we0),
    .c_d0(tmp_0_reg_127),
    .n(n)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln54_fu_189_p2 == 1'd1))) begin
        i_0_reg_105 <= i_reg_292;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_105 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln57_fu_209_p2 == 1'd1))) begin
        j_0_reg_116 <= j_reg_306;
    end else if (((icmp_ln53_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_116 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_0_reg_140 <= k_reg_324;
    end else if (((icmp_ln54_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_140 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_0_reg_127 <= tmp_fu_284_p2;
    end else if (((icmp_ln54_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_0_reg_127 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_load_reg_339 <= a_q0;
        b_load_reg_344 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln58_2_reg_297[6 : 1] <= add_ln58_2_fu_183_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_292 <= i_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_306 <= j_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_324 <= k_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln58_reg_349 <= mul_ln58_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln57_1_reg_316[3 : 0] <= zext_ln57_1_fu_205_p1[3 : 0];
        zext_ln57_reg_311[3 : 0] <= zext_ln57_fu_201_p1[3 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln57_fu_209_p2 == 1'd1))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln53_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln54_fu_189_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln57_fu_209_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln58_2_fu_230_p1;

assign add_ln58_1_fu_260_p2 = (shl_ln58_2_fu_235_p3 + zext_ln58_3_fu_256_p1);

assign add_ln58_2_fu_183_p2 = (zext_ln58_fu_179_p1 + shl_ln_fu_163_p3);

assign add_ln58_3_fu_251_p2 = (zext_ln57_1_reg_316 + shl_ln58_3_fu_243_p3);

assign add_ln58_fu_225_p2 = (zext_ln58_1_fu_221_p1 + add_ln58_2_reg_297);

assign add_ln61_fu_271_p2 = (add_ln58_2_reg_297 + zext_ln57_reg_311);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_address0 = zext_ln58_4_fu_266_p1;

assign c_address0 = zext_ln61_fu_275_p1;

assign i_fu_157_p2 = (i_0_reg_105 + 4'd1);

assign icmp_ln53_fu_151_p2 = ((i_0_reg_105 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_189_p2 = ((j_0_reg_116 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_209_p2 = ((k_0_reg_140 == 4'd10) ? 1'b1 : 1'b0);

assign j_fu_195_p2 = (j_0_reg_116 + 4'd1);

assign k_fu_215_p2 = (k_0_reg_140 + 4'd1);

assign mul_ln58_fu_280_p2 = ($signed(b_load_reg_344) * $signed(a_load_reg_339));

assign shl_ln58_1_fu_171_p3 = {{i_0_reg_105}, {1'd0}};

assign shl_ln58_2_fu_235_p3 = {{k_0_reg_140}, {3'd0}};

assign shl_ln58_3_fu_243_p3 = {{k_0_reg_140}, {1'd0}};

assign shl_ln_fu_163_p3 = {{i_0_reg_105}, {3'd0}};

assign tmp_fu_284_p2 = (tmp_0_reg_127 + mul_ln58_reg_349);

assign zext_ln57_1_fu_205_p1 = j_0_reg_116;

assign zext_ln57_fu_201_p1 = j_0_reg_116;

assign zext_ln58_1_fu_221_p1 = k_0_reg_140;

assign zext_ln58_2_fu_230_p1 = add_ln58_fu_225_p2;

assign zext_ln58_3_fu_256_p1 = add_ln58_3_fu_251_p2;

assign zext_ln58_4_fu_266_p1 = add_ln58_1_fu_260_p2;

assign zext_ln58_fu_179_p1 = shl_ln58_1_fu_171_p3;

assign zext_ln61_fu_275_p1 = add_ln61_fu_271_p2;

always @ (posedge ap_clk) begin
    add_ln58_2_reg_297[0] <= 1'b0;
    zext_ln57_reg_311[6:4] <= 3'b000;
    zext_ln57_1_reg_316[4] <= 1'b0;
end

endmodule //mul
